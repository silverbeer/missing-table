# Multi-stage secure Dockerfile for Sports League Frontend
# Stage 1: Build environment with specific Node.js version
FROM node:20.18.0-slim AS builder

# Security: Set environment variables
ENV NODE_ENV=production \
    NPM_CONFIG_CACHE=/tmp/.npm \
    NPM_CONFIG_UPDATE_NOTIFIER=false \
    NPM_CONFIG_AUDIT_LEVEL=moderate

# Security: Install only essential system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates=20230311 \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean \
    && apt-get autoremove -y

# Create application directory
WORKDIR /app

# Security: Create non-root user for build process
RUN groupadd -r appgroup && useradd -r -g appgroup -u 1001 appuser

# Copy package files with proper ownership
COPY --chown=appuser:appgroup package*.json ./

# Security: Switch to non-root user for dependency installation
USER appuser

# Install dependencies with security audit
RUN npm ci --only=production --no-audit \
    && npm audit --audit-level=moderate \
    && npm cache clean --force

# Copy source code
COPY --chown=appuser:appgroup . .

# Build the application
RUN npm run build

# Stage 2: Security scanning (optional for CI)
FROM aquasec/trivy:latest AS security-scan
COPY --from=builder /app /scan-target
RUN trivy fs --exit-code 0 --no-progress --format table /scan-target

# Stage 3: Nginx runtime with distroless approach
FROM nginx:1.25.5-alpine AS runtime

# Security: Remove default nginx pages and config
RUN rm -rf /usr/share/nginx/html/* \
    && rm /etc/nginx/conf.d/default.conf

# Security: Create non-root user
RUN addgroup -g 1001 -S appgroup && \
    adduser -S -D -H -u 1001 -h /var/cache/nginx -s /sbin/nologin -G appgroup -g appgroup appuser

# Security: Create necessary directories with proper permissions
RUN mkdir -p /var/cache/nginx /var/log/nginx /var/run \
    && chown -R appuser:appgroup /var/cache/nginx \
    && chown -R appuser:appgroup /var/log/nginx \
    && chown -R appuser:appgroup /var/run \
    && chown -R appuser:appgroup /usr/share/nginx/html

# Security: Copy built application
COPY --from=builder --chown=appuser:appgroup /app/dist /usr/share/nginx/html

# Security: Copy secure nginx configuration
COPY --chown=appuser:appgroup nginx.conf /etc/nginx/nginx.conf
COPY --chown=appuser:appgroup security-headers.conf /etc/nginx/conf.d/security-headers.conf

# Security: Set proper permissions
RUN chmod 644 /etc/nginx/nginx.conf \
    && chmod 644 /etc/nginx/conf.d/security-headers.conf \
    && chmod -R 644 /usr/share/nginx/html/*

# Security: Expose only necessary port
EXPOSE 8080

# Security: Switch to non-root user
USER appuser

# Security: Add health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:8080/health || exit 1

# Security: Start nginx with non-daemon mode
CMD ["nginx", "-g", "daemon off;"]