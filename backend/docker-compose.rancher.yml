     version: '3.8'

     services:
       # PostgreSQL Database
       postgres:
         image: postgres:15-alpine
         container_name: missing-table-postgres
         environment:
           POSTGRES_DB: missing_table
           POSTGRES_USER: postgres
           POSTGRES_PASSWORD: postgres123
           POSTGRES_MULTIPLE_DATABASES: security_metrics,behavior_analytics,vulnerabilities,incident_correlation,networ
     k_security,container_security,zero_trust_network,compliance
         ports:
           - "5432:5432"
         volumes:
           - postgres_data:/var/lib/postgresql/data
           - ./scripts/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh
         networks:
           - missing-table-net
         healthcheck:
           test: ["CMD-SHELL", "pg_isready -U postgres"]
           interval: 30s
           timeout: 10s
           retries: 3

       # Redis Cache
       redis:
         image: redis:7-alpine
         container_name: missing-table-redis
         ports:
           - "6379:6379"
         volumes:
           - redis_data:/data
         networks:
           - missing-table-net
         healthcheck:
           test: ["CMD", "redis-cli", "ping"]
           interval: 30s
           timeout: 10s
           retries: 3

       # Supabase (Optional - for development)
       supabase:
         image: supabase/postgres:15.1.0.147
         container_name: missing-table-supabase
         environment:
           POSTGRES_PASSWORD: supabase_password
           POSTGRES_DB: postgres
         ports:
           - "54322:5432"
         volumes:
           - supabase_data:/var/lib/postgresql/data
         networks:
           - missing-table-net
         healthcheck:
           test: ["CMD-SHELL", "pg_isready -U postgres"]
           interval: 30s
           timeout: 10s
           retries: 3

       # Backend API
       backend:
         build:
           context: ./backend
           dockerfile: Dockerfile.dev
         container_name: missing-table-backend
         environment:
           - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/missing_table
           - REDIS_URL=redis://redis:6379
           - ENVIRONMENT=development
           - LOG_LEVEL=info
           - SECURITY_METRICS_DB=postgresql://postgres:postgres123@postgres:5432/security_metrics
           - BEHAVIOR_ANALYTICS_DB=postgresql://postgres:postgres123@postgres:5432/behavior_analytics
           - VULNERABILITIES_DB=postgresql://postgres:postgres123@postgres:5432/vulnerabilities
           - INCIDENT_CORRELATION_DB=postgresql://postgres:postgres123@postgres:5432/incident_correlation
           - NETWORK_SECURITY_DB=postgresql://postgres:postgres123@postgres:5432/network_security
           - CONTAINER_SECURITY_DB=postgresql://postgres:postgres123@postgres:5432/container_security
           - ZERO_TRUST_NETWORK_DB=postgresql://postgres:postgres123@postgres:5432/zero_trust_network
           - COMPLIANCE_DB=postgresql://postgres:postgres123@postgres:5432/compliance
         ports:
           - "8000:8000"
         volumes:
           - ./backend:/app
           - /var/run/docker.sock:/var/run/docker.sock  # For container monitoring
         depends_on:
           postgres:
             condition: service_healthy
           redis:
             condition: service_healthy
         networks:
           - missing-table-net
         healthcheck:
           test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
           interval: 30s
           timeout: 10s
           retries: 3
         command: ["uv", "run", "uvicorn", "app:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

       # Frontend
       frontend:
         build:
           context: ./frontend
           dockerfile: Dockerfile.dev
         container_name: missing-table-frontend
         environment:
           - VITE_API_URL=http://localhost:8000
           - VITE_WS_URL=ws://localhost:8000
           - NODE_ENV=development
         ports:
           - "8080:8080"
         volumes:
           - ./frontend:/app
           - /app/node_modules
         depends_on:
           - backend
         networks:
           - missing-table-net
         command: ["npm", "run", "dev", "--", "--host", "0.0.0.0"]

       # Security Monitoring Stack
       prometheus:
         image: prom/prometheus:latest
         container_name: missing-table-prometheus
         ports:
           - "9090:9090"
         volumes:
           - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
           - prometheus_data:/prometheus
         networks:
           - missing-table-net
         command:
           - '--config.file=/etc/prometheus/prometheus.yml'
           - '--storage.tsdb.path=/prometheus'
           - '--web.console.libraries=/etc/prometheus/console_libraries'
           - '--web.console.templates=/etc/prometheus/consoles'
           - '--web.enable-lifecycle'

       # Grafana for Security Dashboards
       grafana:
         image: grafana/grafana:latest
         container_name: missing-table-grafana
         environment:
           - GF_SECURITY_ADMIN_PASSWORD=admin123
           - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
         ports:
           - "3000:3000"
         volumes:
           - grafana_data:/var/lib/grafana
           - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
           - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
         depends_on:
           - prometheus
         networks:
           - missing-table-net

       # Elasticsearch for Security Logs
       elasticsearch:
         image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
         container_name: missing-table-elasticsearch
         environment:
           - discovery.type=single-node
           - ES_JAVA_OPTS=-Xms512m -Xmx512m
           - xpack.security.enabled=false
         ports:
           - "9200:9200"
         volumes:
           - elasticsearch_data:/usr/share/elasticsearch/data
         networks:
           - missing-table-net
         healthcheck:
           test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
           interval: 30s
           timeout: 10s
           retries: 3

       # Kibana for Log Analysis
       kibana:
         image: docker.elastic.co/kibana/kibana:8.11.0
         container_name: missing-table-kibana
         environment:
           - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
           - xpack.security.enabled=false
         ports:
           - "5601:5601"
         depends_on:
           elasticsearch:
             condition: service_healthy
         networks:
           - missing-table-net

       # Logfire Agent (Mock - for development)
       logfire-agent:
         image: busybox:latest
         container_name: missing-table-logfire
         command: ["sh", "-c", "echo 'Logfire agent placeholder - integrate with actual Logfire in production' && sleep
      infinity"]
         networks:
           - missing-table-net

     volumes:
       postgres_data:
       redis_data:
       supabase_data:
       prometheus_data:
       grafana_data:
       elasticsearch_data:

     networks:
       missing-table-net:
         driver: bridge
