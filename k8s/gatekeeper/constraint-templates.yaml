# OPA Gatekeeper Constraint Templates for Missing Table Application
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8srequiredsecuritycontext
  labels:
    app: gatekeeper
    component: policy
spec:
  crd:
    spec:
      names:
        kind: K8sRequiredSecurityContext
      validation:
        type: object
        properties:
          runAsNonRoot:
            type: boolean
          readOnlyRootFilesystem:
            type: boolean
          allowPrivilegeEscalation:
            type: boolean
          requiredDropCapabilities:
            type: array
            items:
              type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8srequiredsecuritycontext
        
        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          not container.securityContext.runAsNonRoot
          msg := "Container must run as non-root user"
        }
        
        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          not container.securityContext.readOnlyRootFilesystem
          msg := "Container must have read-only root filesystem"
        }
        
        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          container.securityContext.allowPrivilegeEscalation
          msg := "Container must not allow privilege escalation"
        }
        
        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          required := input.parameters.requiredDropCapabilities
          dropped := container.securityContext.capabilities.drop
          missing := required[_]
          not missing in dropped
          msg := sprintf("Container must drop capability: %v", [missing])
        }
---
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8srequiredlabels
  labels:
    app: gatekeeper
    component: policy
spec:
  crd:
    spec:
      names:
        kind: K8sRequiredLabels
      validation:
        type: object
        properties:
          labels:
            type: array
            items:
              type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8srequiredlabels
        
        violation[{"msg": msg}] {
          required := input.parameters.labels
          provided := input.review.object.metadata.labels
          missing := required[_]
          not provided[missing]
          msg := sprintf("Missing required label: %v", [missing])
        }
---
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8sallowedregistries
  labels:
    app: gatekeeper
    component: policy
spec:
  crd:
    spec:
      names:
        kind: K8sAllowedRegistries
      validation:
        type: object
        properties:
          registries:
            type: array
            items:
              type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8sallowedregistries
        
        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          not registry_allowed(container.image, input.parameters.registries)
          msg := sprintf("Container image '%v' comes from untrusted registry", [container.image])
        }
        
        registry_allowed(image, allowed_registries) {
          registry := allowed_registries[_]
          startswith(image, registry)
        }
---
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8sresourceconstraints
  labels:
    app: gatekeeper
    component: policy
spec:
  crd:
    spec:
      names:
        kind: K8sResourceConstraints
      validation:
        type: object
        properties:
          maxCpu:
            type: string
          maxMemory:
            type: string
          requireRequests:
            type: boolean
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8sresourceconstraints
        
        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          input.parameters.requireRequests
          not container.resources.requests
          msg := "Container must specify resource requests"
        }
        
        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          cpu_limit := container.resources.limits.cpu
          max_cpu := input.parameters.maxCpu
          cpu_limit_value := parse_resource(cpu_limit)
          max_cpu_value := parse_resource(max_cpu)
          cpu_limit_value > max_cpu_value
          msg := sprintf("Container CPU limit '%v' exceeds maximum allowed '%v'", [cpu_limit, max_cpu])
        }
        
        parse_resource(resource) = value {
          endswith(resource, "m")
          value := to_number(trim_suffix(resource, "m"))
        }
        
        parse_resource(resource) = value {
          not contains(resource, "m")
          value := to_number(resource) * 1000
        }
---
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8sblockednamespacelabels
  labels:
    app: gatekeeper
    component: policy
spec:
  crd:
    spec:
      names:
        kind: K8sBlockedNamespaceLabels
      validation:
        type: object
        properties:
          blockedLabels:
            type: array
            items:
              type: object
              properties:
                key:
                  type: string
                value:
                  type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8sblockednamespacelabels
        
        violation[{"msg": msg}] {
          blocked := input.parameters.blockedLabels[_]
          ns_label := input.review.object.metadata.labels[blocked.key]
          ns_label == blocked.value
          msg := sprintf("Namespace cannot have label %v=%v", [blocked.key, blocked.value])
        }