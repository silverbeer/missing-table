# OPA Gatekeeper Constraints for Missing Table Application
apiVersion: config.gatekeeper.sh/v1alpha1
kind: K8sRequiredSecurityContext
metadata:
  name: missing-table-security-context
  labels:
    app: gatekeeper
    component: policy
spec:
  match:
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
      - apiGroups: ["apps"]
        kinds: ["Deployment", "StatefulSet", "DaemonSet"]
    namespaces: ["missing-table"]
  parameters:
    runAsNonRoot: true
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    requiredDropCapabilities: ["ALL"]
---
apiVersion: config.gatekeeper.sh/v1alpha1
kind: K8sRequiredLabels
metadata:
  name: missing-table-required-labels
  labels:
    app: gatekeeper
    component: policy
spec:
  match:
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
      - apiGroups: ["apps"]
        kinds: ["Deployment", "StatefulSet", "DaemonSet"]
    namespaces: ["missing-table"]
  parameters:
    labels:
      - "app"
      - "component"
      - "version"
---
apiVersion: config.gatekeeper.sh/v1alpha1
kind: K8sAllowedRegistries
metadata:
  name: missing-table-allowed-registries
  labels:
    app: gatekeeper
    component: policy
spec:
  match:
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
      - apiGroups: ["apps"]
        kinds: ["Deployment", "StatefulSet", "DaemonSet"]
    namespaces: ["missing-table"]
  parameters:
    registries:
      - "gcr.io/"
      - "registry.k8s.io/"
      - "quay.io/"
      - "docker.io/library/"
      - "ghcr.io/"
      - "missing-table-backend"
      - "missing-table-frontend"
---
apiVersion: config.gatekeeper.sh/v1alpha1
kind: K8sResourceConstraints
metadata:
  name: missing-table-resource-constraints
  labels:
    app: gatekeeper
    component: policy
spec:
  match:
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
      - apiGroups: ["apps"]
        kinds: ["Deployment", "StatefulSet", "DaemonSet"]
    namespaces: ["missing-table"]
  parameters:
    maxCpu: "2"
    maxMemory: "2Gi"
    requireRequests: true
---
# Block privileged security contexts
apiVersion: config.gatekeeper.sh/v1alpha1
kind: K8sBlockedNamespaceLabels
metadata:
  name: missing-table-blocked-labels
  labels:
    app: gatekeeper
    component: policy
spec:
  match:
    kinds:
      - apiGroups: [""]
        kinds: ["Namespace"]
  parameters:
    blockedLabels:
      - key: "security.policy/level"
        value: "privileged"
      - key: "pod-security.kubernetes.io/enforce"
        value: "privileged"
---
# Additional security constraints
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8smissingtablesecurity
  labels:
    app: gatekeeper
    component: policy
spec:
  crd:
    spec:
      names:
        kind: K8sMissingTableSecurity
      validation:
        type: object
        properties:
          maxReplicas:
            type: integer
          requiredServiceAccount:
            type: boolean
          blockedVolumes:
            type: array
            items:
              type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8smissingtablesecurity
        
        # Limit replica count
        violation[{"msg": msg}] {
          input.review.object.kind in ["Deployment", "StatefulSet"]
          replicas := input.review.object.spec.replicas
          max_replicas := input.parameters.maxReplicas
          replicas > max_replicas
          msg := sprintf("Replica count %v exceeds maximum allowed %v", [replicas, max_replicas])
        }
        
        # Require specific service account
        violation[{"msg": msg}] {
          input.parameters.requiredServiceAccount
          not input.review.object.spec.serviceAccountName
          msg := "Must specify serviceAccountName"
        }
        
        # Block dangerous volume types
        violation[{"msg": msg}] {
          volume := input.review.object.spec.volumes[_]
          blocked := input.parameters.blockedVolumes[_]
          volume[blocked]
          msg := sprintf("Volume type '%v' is not allowed", [blocked])
        }
        
        # Ensure automountServiceAccountToken is false
        violation[{"msg": msg}] {
          input.review.object.spec.automountServiceAccountToken == true
          msg := "automountServiceAccountToken must be false for security"
        }
        
        # Check for hostNetwork
        violation[{"msg": msg}] {
          input.review.object.spec.hostNetwork == true
          msg := "hostNetwork is not allowed"
        }
        
        # Check for hostPID
        violation[{"msg": msg}] {
          input.review.object.spec.hostPID == true
          msg := "hostPID is not allowed"
        }
        
        # Check for hostIPC
        violation[{"msg": msg}] {
          input.review.object.spec.hostIPC == true
          msg := "hostIPC is not allowed"
        }
---
apiVersion: config.gatekeeper.sh/v1alpha1
kind: K8sMissingTableSecurity
metadata:
  name: missing-table-additional-security
  labels:
    app: gatekeeper
    component: policy
spec:
  match:
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
      - apiGroups: ["apps"]
        kinds: ["Deployment", "StatefulSet", "DaemonSet"]
    namespaces: ["missing-table"]
  parameters:
    maxReplicas: 5
    requiredServiceAccount: true
    blockedVolumes:
      - "hostPath"
      - "nfs"
      - "cephfs"
      - "rbd"