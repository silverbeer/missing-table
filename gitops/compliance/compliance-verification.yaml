# Compliance Verification System for GitOps
# This system ensures compliance with security frameworks before rollout

apiVersion: v1
kind: Namespace
metadata:
  name: compliance-verification
  labels:
    name: compliance-verification
    security.missing-table.io/level: "critical"
    compliance.missing-table.io/framework: "soc2"
---
# Compliance Verification ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: compliance-config
  namespace: compliance-verification
data:
  frameworks.yaml: |
    # Compliance frameworks configuration
    frameworks:
      soc2:
        name: "SOC 2 Type II"
        version: "2017"
        controls:
          CC6.1:
            description: "Logical and physical access controls"
            requirements:
              - "RBAC implementation"
              - "Network segmentation"
              - "Encryption in transit and at rest"
            tests:
              - "verify_rbac_policies"
              - "verify_network_policies"
              - "verify_tls_encryption"
          
          CC6.7:
            description: "System data transmission and disposal"
            requirements:
              - "Data encryption in transit"
              - "Secure data deletion"
              - "Data classification"
            tests:
              - "verify_data_encryption"
              - "verify_secret_management"
          
          CC7.1:
            description: "System monitoring for security events"
            requirements:
              - "Security event logging"
              - "Monitoring and alerting"
              - "Incident response"
            tests:
              - "verify_audit_logging"
              - "verify_monitoring_setup"
      
      cis_k8s:
        name: "CIS Kubernetes Benchmark"
        version: "1.7.0"
        controls:
          "5.1.1":
            description: "Ensure cluster-admin role is only used where required"
            requirements:
              - "Minimal cluster-admin usage"
              - "Regular access review"
            tests:
              - "verify_cluster_admin_usage"
          
          "5.2.2":
            description: "Minimize admission of containers with allowPrivilegeEscalation"
            requirements:
              - "No privilege escalation"
              - "Security context enforcement"
            tests:
              - "verify_no_privilege_escalation"
          
          "5.7.3":
            description: "Apply Security Context to Your Pods and Containers"
            requirements:
              - "runAsNonRoot: true"
              - "readOnlyRootFilesystem: true"
              - "Capabilities dropped"
            tests:
              - "verify_security_context"
      
      nist:
        name: "NIST Cybersecurity Framework"
        version: "1.1"
        controls:
          PR.AC-1:
            description: "Identities and credentials are issued and managed"
            requirements:
              - "Service account management"
              - "RBAC implementation"
            tests:
              - "verify_service_accounts"
              - "verify_rbac_implementation"
          
          PR.DS-1:
            description: "Data-at-rest is protected"
            requirements:
              - "Encryption at rest"
              - "Secret encryption"
            tests:
              - "verify_encryption_at_rest"
      
      pci_dss:
        name: "PCI Data Security Standard"
        version: "4.0"
        controls:
          "2.2.1":
            description: "Configuration standards are implemented"
            requirements:
              - "Secure configuration baselines"
              - "Configuration management"
            tests:
              - "verify_secure_configuration"
          
          "7.1.1":
            description: "Access control systems are implemented"
            requirements:
              - "Least privilege access"
              - "Role-based access control"
            tests:
              - "verify_access_control"

  tests.yaml: |
    # Compliance test definitions
    tests:
      verify_rbac_policies:
        description: "Verify RBAC policies are properly configured"
        query: |
          kubectl get clusterrolebindings -o json | jq -r '
            .items[] | 
            select(.roleRef.name == "cluster-admin") | 
            .subjects[]? | 
            select(.kind == "User" and (.name | startswith("system:") | not))
          '
        expected: "empty"
        severity: "critical"
      
      verify_network_policies:
        description: "Verify NetworkPolicies exist for workload isolation"
        query: |
          kubectl get networkpolicies --all-namespaces -o json | jq '.items | length'
        expected: "> 0"
        severity: "high"
      
      verify_tls_encryption:
        description: "Verify TLS encryption is enforced"
        query: |
          kubectl get ingresses --all-namespaces -o json | jq -r '
            .items[] | 
            select(.spec.tls == null) | 
            "\(.metadata.namespace)/\(.metadata.name)"
          '
        expected: "empty"
        severity: "high"
      
      verify_no_privilege_escalation:
        description: "Verify no containers allow privilege escalation"
        query: |
          kubectl get pods --all-namespaces -o json | jq -r '
            .items[] | 
            .spec.containers[]? | 
            select(.securityContext.allowPrivilegeEscalation == true) | 
            "privileged container found"
          '
        expected: "empty"
        severity: "critical"
      
      verify_security_context:
        description: "Verify security context is properly configured"
        query: |
          kubectl get pods --all-namespaces -o json | jq -r '
            .items[] | 
            select(.metadata.namespace != "kube-system") |
            .spec.containers[]? | 
            select(.securityContext.runAsNonRoot != true or 
                   .securityContext.readOnlyRootFilesystem != true or
                   (.securityContext.capabilities.drop // []) | index("ALL") | not) |
            "insecure container found"
          '
        expected: "empty"
        severity: "high"
      
      verify_audit_logging:
        description: "Verify audit logging is enabled"
        query: |
          kubectl get events --all-namespaces --field-selector type=Warning | wc -l
        expected: ">= 0"
        severity: "medium"

  remediation.yaml: |
    # Compliance remediation actions
    remediation:
      verify_rbac_policies:
        action: "Remove unnecessary cluster-admin bindings"
        command: |
          kubectl delete clusterrolebinding <binding-name>
        documentation: "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
      
      verify_network_policies:
        action: "Create NetworkPolicy for workload isolation"
        command: |
          kubectl apply -f - <<EOF
          apiVersion: networking.k8s.io/v1
          kind: NetworkPolicy
          metadata:
            name: default-deny-all
            namespace: <namespace>
          spec:
            podSelector: {}
            policyTypes:
            - Ingress
            - Egress
          EOF
        documentation: "https://kubernetes.io/docs/concepts/services-networking/network-policies/"
      
      verify_no_privilege_escalation:
        action: "Update security context to disable privilege escalation"
        command: |
          kubectl patch deployment <deployment> -p '{"spec":{"template":{"spec":{"containers":[{"name":"<container>","securityContext":{"allowPrivilegeEscalation":false}}]}}}}'
        documentation: "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/"

---
# Compliance Verification Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: compliance-verifier
  namespace: compliance-verification
  annotations:
    security.missing-table.io/description: "Service account for compliance verification"
automountServiceAccountToken: true

---
# Compliance Verification ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: compliance-verifier
  labels:
    compliance.missing-table.io/component: "verifier"
rules:
# Read access for compliance checking
- apiGroups: ["*"]
  resources: ["*"]
  verbs: ["get", "list", "watch"]
# Write access for remediation (limited)
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create"]
- apiGroups: ["batch"]
  resources: ["jobs"]
  verbs: ["create", "get", "list", "watch", "delete"]

---
# Compliance Verification ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: compliance-verifier
  labels:
    compliance.missing-table.io/component: "verifier"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: compliance-verifier
subjects:
- kind: ServiceAccount
  name: compliance-verifier
  namespace: compliance-verification

---
# Compliance Verification Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: compliance-verifier
  namespace: compliance-verification
  labels:
    app: compliance-verifier
    compliance.missing-table.io/component: "verifier"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: compliance-verifier
  template:
    metadata:
      labels:
        app: compliance-verifier
        compliance.missing-table.io/component: "verifier"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: compliance-verifier
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
      containers:
      - name: verifier
        image: gcr.io/missing-table-prod/compliance-verifier:v1.0.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 8090
          name: health
          protocol: TCP
        env:
        - name: CONFIG_PATH
          value: "/config"
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: LOG_LEVEL
          value: "info"
        - name: COMPLIANCE_FRAMEWORKS
          value: "soc2,cis_k8s,nist,pci_dss"
        volumeMounts:
        - name: config
          mountPath: /config
          readOnly: true
        - name: tmp
          mountPath: /tmp
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        resources:
          limits:
            cpu: 300m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 128Mi
        livenessProbe:
          httpGet:
            path: /health
            port: 8090
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /ready
            port: 8090
          initialDelaySeconds: 5
          periodSeconds: 10
      volumes:
      - name: config
        projected:
          sources:
          - configMap:
              name: compliance-config
              items:
              - key: frameworks.yaml
                path: frameworks.yaml
              - key: tests.yaml
                path: tests.yaml
              - key: remediation.yaml
                path: remediation.yaml
      - name: tmp
        emptyDir:
          sizeLimit: 512Mi

---
# Compliance Verification Service
apiVersion: v1
kind: Service
metadata:
  name: compliance-verifier
  namespace: compliance-verification
  labels:
    app: compliance-verifier
    compliance.missing-table.io/component: "verifier"
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: compliance-verifier

---
# ArgoCD Pre-Sync Hook for Compliance Verification
apiVersion: batch/v1
kind: Job
metadata:
  name: pre-sync-compliance-check
  namespace: compliance-verification
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
    argocd.argoproj.io/sync-wave: "-1"
  labels:
    compliance.missing-table.io/hook: "pre-sync"
spec:
  template:
    metadata:
      labels:
        app: pre-sync-compliance-check
    spec:
      serviceAccountName: compliance-verifier
      restartPolicy: Never
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
      containers:
      - name: compliance-check
        image: gcr.io/missing-table-prod/compliance-verifier:v1.0.0
        command:
        - /bin/sh
        - -c
        - |
          echo "🔍 Running pre-sync compliance verification..."
          
          # Set compliance check mode
          export COMPLIANCE_MODE="pre-sync"
          export TARGET_NAMESPACE="${ARGOCD_APP_NAMESPACE:-default}"
          
          # Run compliance tests
          FAILED_TESTS=""
          
          echo "Checking SOC 2 compliance..."
          if ! /app/compliance-verifier --framework soc2 --test-only; then
            FAILED_TESTS="$FAILED_TESTS soc2"
          fi
          
          echo "Checking CIS Kubernetes compliance..."
          if ! /app/compliance-verifier --framework cis_k8s --test-only; then
            FAILED_TESTS="$FAILED_TESTS cis_k8s"
          fi
          
          echo "Checking NIST compliance..."
          if ! /app/compliance-verifier --framework nist --test-only; then
            FAILED_TESTS="$FAILED_TESTS nist"
          fi
          
          if [ -n "$FAILED_TESTS" ]; then
            echo "❌ Compliance verification FAILED for frameworks: $FAILED_TESTS"
            echo "Deployment cannot proceed until compliance issues are resolved."
            exit 1
          else
            echo "✅ Compliance verification PASSED"
            echo "All compliance requirements met. Deployment can proceed."
          fi
        env:
        - name: ARGOCD_APP_NAME
          value: "missing-table"
        - name: ARGOCD_APP_NAMESPACE
          value: "missing-table-prod"
        volumeMounts:
        - name: config
          mountPath: /config
          readOnly: true
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        resources:
          limits:
            cpu: 200m
            memory: 128Mi
          requests:
            cpu: 100m
            memory: 64Mi
      volumes:
      - name: config
        configMap:
          name: compliance-config

---
# ArgoCD Post-Sync Hook for Compliance Verification
apiVersion: batch/v1
kind: Job
metadata:
  name: post-sync-compliance-check
  namespace: compliance-verification
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
    argocd.argoproj.io/sync-wave: "1"
  labels:
    compliance.missing-table.io/hook: "post-sync"
spec:
  template:
    metadata:
      labels:
        app: post-sync-compliance-check
    spec:
      serviceAccountName: compliance-verifier
      restartPolicy: Never
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
      containers:
      - name: compliance-verify
        image: gcr.io/missing-table-prod/compliance-verifier:v1.0.0
        command:
        - /bin/sh
        - -c
        - |
          echo "🔍 Running post-sync compliance verification..."
          
          # Wait for deployment to stabilize
          sleep 30
          
          # Set compliance check mode
          export COMPLIANCE_MODE="post-sync"
          export TARGET_NAMESPACE="${ARGOCD_APP_NAMESPACE:-default}"
          
          # Run comprehensive compliance verification
          echo "Running comprehensive compliance verification..."
          
          COMPLIANCE_SCORE=0
          TOTAL_CONTROLS=0
          
          for framework in soc2 cis_k8s nist pci_dss; do
            echo "Verifying $framework compliance..."
            if /app/compliance-verifier --framework "$framework" --generate-report; then
              COMPLIANCE_SCORE=$((COMPLIANCE_SCORE + 1))
            fi
            TOTAL_CONTROLS=$((TOTAL_CONTROLS + 1))
          done
          
          COMPLIANCE_PERCENTAGE=$((COMPLIANCE_SCORE * 100 / TOTAL_CONTROLS))
          
          echo "Compliance verification completed:"
          echo "  Frameworks passed: $COMPLIANCE_SCORE/$TOTAL_CONTROLS"
          echo "  Compliance score: $COMPLIANCE_PERCENTAGE%"
          
          # Generate compliance report
          echo "Generating compliance report..."
          /app/compliance-verifier --generate-report --output /tmp/compliance-report.json
          
          # Upload to audit storage
          if command -v gsutil >/dev/null 2>&1; then
            echo "Uploading compliance report to audit storage..."
            gsutil cp /tmp/compliance-report.json gs://missing-table-compliance-audit/$(date +%Y%m%d-%H%M%S)-compliance-report.json
          fi
          
          if [ $COMPLIANCE_PERCENTAGE -lt 90 ]; then
            echo "⚠️  WARNING: Compliance score below 90% threshold"
            echo "This deployment may not meet all compliance requirements"
          else
            echo "✅ Compliance verification successful"
          fi
        env:
        - name: ARGOCD_APP_NAME
          value: "missing-table"
        - name: ARGOCD_APP_NAMESPACE
          value: "missing-table-prod"
        volumeMounts:
        - name: config
          mountPath: /config
          readOnly: true
        - name: tmp
          mountPath: /tmp
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        resources:
          limits:
            cpu: 200m
            memory: 128Mi
          requests:
            cpu: 100m
            memory: 64Mi
      volumes:
      - name: config
        configMap:
          name: compliance-config
      - name: tmp
        emptyDir:
          sizeLimit: 256Mi

---
# Compliance Monitoring CronJob
apiVersion: batch/v1
kind: CronJob
metadata:
  name: compliance-monitoring
  namespace: compliance-verification
  labels:
    compliance.missing-table.io/component: "monitoring"
spec:
  schedule: "0 6 * * *"  # Daily at 6 AM
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: compliance-monitoring
        spec:
          serviceAccountName: compliance-verifier
          restartPolicy: OnFailure
          securityContext:
            runAsNonRoot: true
            runAsUser: 65534
            runAsGroup: 65534
            fsGroup: 65534
          containers:
          - name: monitor
            image: gcr.io/missing-table-prod/compliance-verifier:v1.0.0
            command:
            - /bin/sh
            - -c
            - |
              echo "🔍 Running daily compliance monitoring..."
              
              # Generate daily compliance report
              /app/compliance-verifier --mode daily-monitoring --all-frameworks
              
              # Check for compliance drift
              /app/compliance-verifier --check-drift
              
              echo "Daily compliance monitoring completed"
            volumeMounts:
            - name: config
              mountPath: /config
              readOnly: true
            securityContext:
              allowPrivilegeEscalation: false
              runAsNonRoot: true
              runAsUser: 65534
              runAsGroup: 65534
              readOnlyRootFilesystem: true
              capabilities:
                drop:
                - ALL
            resources:
              limits:
                cpu: 200m
                memory: 128Mi
              requests:
                cpu: 100m
                memory: 64Mi
          volumes:
          - name: config
            configMap:
              name: compliance-config