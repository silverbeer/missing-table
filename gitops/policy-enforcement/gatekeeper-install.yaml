# OPA Gatekeeper Installation with Security Policy Enforcement
# This provides policy enforcement at deployment time for GitOps

apiVersion: v1
kind: Namespace
metadata:
  name: gatekeeper-system
  labels:
    name: gatekeeper-system
    security.missing-table.io/level: "critical"
    compliance.missing-table.io/framework: "soc2"
    pod-security.kubernetes.io/enforce: restricted
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/warn: restricted
---
# Custom Resource Definitions for Gatekeeper
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: constrainttemplates.templates.gatekeeper.sh
  labels:
    gatekeeper.sh/system: "yes"
spec:
  group: templates.gatekeeper.sh
  names:
    kind: ConstraintTemplate
    listKind: ConstraintTemplateList
    plural: constrainttemplates
    singular: constrainttemplate
  scope: Cluster
  versions:
  - name: v1beta1
    served: true
    storage: true
    schema:
      openAPIV3Schema:
        type: object
        properties:
          spec:
            type: object
            properties:
              crd:
                type: object
                properties:
                  spec:
                    type: object
                    properties:
                      names:
                        type: object
                        properties:
                          kind:
                            type: string
                          shortNames:
                            type: array
                            items:
                              type: string
                      validation:
                        type: object
                        properties:
                          openAPIV3Schema:
                            type: object
              targets:
                type: array
                items:
                  type: object
                  properties:
                    target:
                      type: string
                    rego:
                      type: string
---
# Security Policy: Require Security Context
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8srequiredsecuritycontext
  annotations:
    security.missing-table.io/description: "Enforce security context requirements"
    compliance.missing-table.io/control: "SC-3"
spec:
  crd:
    spec:
      names:
        kind: K8sRequiredSecurityContext
      validation:
        openAPIV3Schema:
          type: object
          properties:
            runAsNonRoot:
              type: boolean
            requiredDropCapabilities:
              type: array
              items:
                type: string
            allowedVolumeTypes:
              type: array
              items:
                type: string
            forbiddenSysctls:
              type: array
              items:
                type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8srequiredsecuritycontext
        
        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          not container.securityContext.runAsNonRoot
          msg := "Container must run as non-root user"
        }
        
        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          not container.securityContext.allowPrivilegeEscalation == false
          msg := "Container must not allow privilege escalation"
        }
        
        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          not container.securityContext.readOnlyRootFilesystem == true
          msg := "Container must use read-only root filesystem"
        }
        
        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          not has_dropped_all_capabilities(container)
          msg := "Container must drop ALL capabilities"
        }
        
        has_dropped_all_capabilities(container) {
          container.securityContext.capabilities.drop[_] == "ALL"
        }
        
        violation[{"msg": msg}] {
          volume := input.review.object.spec.volumes[_]
          volume.hostPath
          msg := "HostPath volumes are not allowed"
        }
        
        violation[{"msg": msg}] {
          volume := input.review.object.spec.volumes[_]
          volume.hostPID
          msg := "HostPID is not allowed"
        }

---
# Security Policy: Required Labels
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8srequiredlabels
  annotations:
    security.missing-table.io/description: "Enforce required security and compliance labels"
    compliance.missing-table.io/control: "CM-8"
spec:
  crd:
    spec:
      names:
        kind: K8sRequiredLabels
      validation:
        openAPIV3Schema:
          type: object
          properties:
            labels:
              type: array
              items:
                type: object
                properties:
                  key:
                    type: string
                  allowedRegex:
                    type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8srequiredlabels
        
        get_message(parameters, _default) = msg {
          not parameters.message
          msg := _default
        }
        
        get_message(parameters, _default) = msg {
          msg := parameters.message
        }
        
        violation[{"msg": msg}] {
          required := input.parameters.labels
          provided := input.review.object.metadata.labels
          missing := required[_]
          not provided[missing.key]
          msg := sprintf("Missing required label: %v", [missing.key])
        }
        
        violation[{"msg": msg}] {
          value := input.review.object.metadata.labels[key]
          expected := input.parameters.labels[_]
          expected.key == key
          expected.allowedRegex
          not re_match(expected.allowedRegex, value)
          msg := sprintf("Label %v value %v does not match required regex: %v", [key, value, expected.allowedRegex])
        }

---
# Security Policy: Image Security
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8simagesecurity
  annotations:
    security.missing-table.io/description: "Enforce container image security requirements"
    compliance.missing-table.io/control: "SA-3"
spec:
  crd:
    spec:
      names:
        kind: K8sImageSecurity
      validation:
        openAPIV3Schema:
          type: object
          properties:
            allowedRegistries:
              type: array
              items:
                type: string
            disallowLatest:
              type: boolean
            requireDigests:
              type: boolean
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8simagesecurity
        
        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          not starts_with(container.image, input.parameters.allowedRegistries[_])
          msg := sprintf("Container image %v must be from an allowed registry", [container.image])
        }
        
        violation[{"msg": msg}] {
          input.parameters.disallowLatest
          container := input.review.object.spec.containers[_]
          endswith(container.image, ":latest")
          msg := sprintf("Container image %v must not use 'latest' tag", [container.image])
        }
        
        violation[{"msg": msg}] {
          input.parameters.requireDigests
          container := input.review.object.spec.containers[_]
          not contains(container.image, "@sha256:")
          msg := sprintf("Container image %v must use SHA256 digest", [container.image])
        }

---
# Security Policy: Network Policies Required
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8srequirenetworkpolicy
  annotations:
    security.missing-table.io/description: "Require NetworkPolicy for namespace isolation"
    compliance.missing-table.io/control: "SC-7"
spec:
  crd:
    spec:
      names:
        kind: K8sRequireNetworkPolicy
      validation:
        openAPIV3Schema:
          type: object
          properties:
            exemptImages:
              type: array
              items:
                type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8srequirenetworkpolicy
        
        violation[{"msg": msg}] {
          input.review.kind.kind == "Pod"
          input.review.operation == "CREATE"
          not has_network_policy
          msg := "Namespace must have a NetworkPolicy"
        }
        
        has_network_policy {
          data.inventory.cluster["networking.k8s.io/v1"]["NetworkPolicy"][_].metadata.namespace == input.review.object.metadata.namespace
        }

---
# Security Constraint: Require Security Context
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sRequiredSecurityContext
metadata:
  name: must-have-security-context
  annotations:
    security.missing-table.io/enforcement: "strict"
    compliance.missing-table.io/audit: "daily"
spec:
  enforcementAction: warn  # Change to "deny" for strict enforcement
  match:
    kinds:
      - apiGroups: ["apps"]
        kinds: ["Deployment", "StatefulSet", "DaemonSet"]
      - apiGroups: [""]
        kinds: ["Pod"]
    excludedNamespaces: ["kube-system", "kube-public", "gatekeeper-system"]
  parameters:
    runAsNonRoot: true
    requiredDropCapabilities: ["ALL"]
    allowedVolumeTypes: ["configMap", "emptyDir", "projected", "secret", "downwardAPI", "persistentVolumeClaim"]

---
# Security Constraint: Required Labels
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sRequiredLabels
metadata:
  name: must-have-security-labels
  annotations:
    security.missing-table.io/enforcement: "strict"
    compliance.missing-table.io/audit: "daily"
spec:
  enforcementAction: warn
  match:
    kinds:
      - apiGroups: ["apps"]
        kinds: ["Deployment", "StatefulSet", "DaemonSet"]
      - apiGroups: [""]
        kinds: ["Service", "ConfigMap", "Secret"]
    excludedNamespaces: ["kube-system", "kube-public"]
  parameters:
    labels:
      - key: "app.kubernetes.io/name"
        allowedRegex: "^[a-zA-Z0-9.-]+$"
      - key: "app.kubernetes.io/version"
        allowedRegex: "^[a-zA-Z0-9.-]+$"
      - key: "environment"
        allowedRegex: "^(development|staging|production)$"
      - key: "security.missing-table.io/level"
        allowedRegex: "^(low|medium|high|critical)$"

---
# Security Constraint: Image Security
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sImageSecurity
metadata:
  name: allowed-registries-only
  annotations:
    security.missing-table.io/enforcement: "strict"
    compliance.missing-table.io/audit: "daily"
spec:
  enforcementAction: deny  # Strict enforcement for image security
  match:
    kinds:
      - apiGroups: ["apps"]
        kinds: ["Deployment", "StatefulSet", "DaemonSet"]
      - apiGroups: [""]
        kinds: ["Pod"]
    excludedNamespaces: ["kube-system", "kube-public"]
  parameters:
    allowedRegistries:
      - "gcr.io/missing-table-prod/"
      - "gcr.io/missing-table-staging/"
      - "quay.io/argoproj/"
      - "docker.io/library/"
      - "registry.k8s.io/"
    disallowLatest: true
    requireDigests: false  # Set to true for maximum security

---
# Security Constraint: Network Policy Required
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sRequireNetworkPolicy
metadata:
  name: require-network-policy
  annotations:
    security.missing-table.io/enforcement: "advisory"
    compliance.missing-table.io/audit: "weekly"
spec:
  enforcementAction: warn
  match:
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    excludedNamespaces: ["kube-system", "kube-public", "gatekeeper-system", "default"]

---
# Gatekeeper Configuration
apiVersion: config.gatekeeper.sh/v1alpha1
kind: Config
metadata:
  name: config
  namespace: gatekeeper-system
spec:
  # Sync external data for policy decisions
  sync:
    syncOnly:
      - group: "networking.k8s.io"
        version: "v1"
        kind: "NetworkPolicy"
      - group: ""
        version: "v1"
        kind: "Namespace"
      - group: ""
        version: "v1"
        kind: "Pod"
  
  # Validation settings
  validation:
    traces:
      - user:
          kind:
            group: "*"
            version: "*"
            kind: "*"
        kind:
          group: "*"
          version: "*"
          kind: "*"
  
  # Match settings
  match:
    - excludedNamespaces: ["kube-system", "gatekeeper-system"]
      processes: ["*"]
  
  # Readiness settings
  readiness:
    statsEnabled: true
  
  # Audit settings
  audit:
    auditFromCache: Enabled
    constraintViolationsLimit: 20
    auditChunkSize: 500

---
# Security Metrics and Monitoring ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: gatekeeper-metrics-config
  namespace: gatekeeper-system
  labels:
    security.missing-table.io/component: "metrics"
data:
  metrics.yaml: |
    # Gatekeeper metrics configuration
    violations_total:
      description: "Total number of constraint violations"
      labels:
        - constraint_kind
        - constraint_name
        - enforcement_action
        - namespace
      type: counter
    
    audit_duration_seconds:
      description: "Time taken to complete audit runs"
      type: histogram
    
    constraint_template_count:
      description: "Number of constraint templates"
      type: gauge
    
    constraint_count:
      description: "Number of active constraints"
      labels:
        - constraint_kind
      type: gauge