# Security Response System with Alerting and Auto-Remediation
# This system provides automated response to security policy violations

apiVersion: v1
kind: Namespace
metadata:
  name: security-response
  labels:
    name: security-response
    security.missing-table.io/level: "critical"
    compliance.missing-table.io/framework: "soc2"
---
# Security Response Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: security-response-config
  namespace: security-response
data:
  config.yaml: |
    # Security response configuration
    response:
      # Alert thresholds
      thresholds:
        critical: 0    # Immediate response to critical events
        high: 3        # Response after 3 high severity events
        medium: 10     # Response after 10 medium severity events
        low: 50        # Response after 50 low severity events
      
      # Response actions
      actions:
        critical:
          - "isolate_pod"
          - "create_incident"
          - "notify_security_team"
          - "escalate_to_oncall"
        high:
          - "quarantine_pod"
          - "create_incident"
          - "notify_security_team"
        medium:
          - "log_event"
          - "create_ticket"
          - "notify_team_lead"
        low:
          - "log_event"
          - "daily_report"
      
      # Auto-remediation rules
      remediation:
        privileged_container:
          action: "terminate_pod"
          approval_required: false
          cooldown_minutes: 5
        
        suspicious_network_activity:
          action: "isolate_pod"
          approval_required: true
          cooldown_minutes: 15
        
        policy_violation:
          action: "quarantine_pod"
          approval_required: false
          cooldown_minutes: 10
        
        compliance_violation:
          action: "create_incident"
          approval_required: false
          cooldown_minutes: 0
      
      # Notification channels
      notifications:
        slack:
          enabled: true
          channel: "#security-alerts"
          webhook_secret: "slack-webhook"
        
        pagerduty:
          enabled: true
          service_key_secret: "pagerduty-key"
        
        email:
          enabled: true
          smtp_server: "smtp.company.com"
          from: "security@missing-table.io"
          to: ["security-team@missing-table.io"]
        
        teams:
          enabled: false
          webhook_secret: "teams-webhook"
      
      # Incident management
      incident:
        auto_create: true
        severity_mapping:
          critical: "P1"
          high: "P2"
          medium: "P3"
          low: "P4"
        
        escalation:
          p1_escalation_minutes: 15
          p2_escalation_minutes: 60
          p3_escalation_minutes: 240
          p4_escalation_minutes: 1440

  remediation-rules.yaml: |
    # Auto-remediation rules configuration
    rules:
      - name: "Privileged Container Remediation"
        description: "Automatically terminate privileged containers"
        trigger:
          event_type: "falco"
          rule_name: "Privileged Container in Production"
          severity: "critical"
        action:
          type: "terminate_pod"
          parameters:
            grace_period_seconds: 0
            force: true
        approval_required: false
        enabled: true
      
      - name: "Network Policy Violation"
        description: "Isolate pods violating network policies"
        trigger:
          event_type: "gatekeeper"
          violation_type: "K8sRequireNetworkPolicy"
          severity: "high"
        action:
          type: "isolate_pod"
          parameters:
            create_network_policy: true
            deny_all_traffic: true
        approval_required: false
        enabled: true
      
      - name: "Security Context Violation"
        description: "Quarantine pods with insecure security context"
        trigger:
          event_type: "gatekeeper"
          violation_type: "K8sRequiredSecurityContext"
          severity: "high"
        action:
          type: "quarantine_pod"
          parameters:
            quarantine_namespace: "security-quarantine"
            preserve_logs: true
        approval_required: false
        enabled: true
      
      - name: "Unauthorized Secret Access"
        description: "Create incident for unauthorized secret access"
        trigger:
          event_type: "falco"
          rule_name: "Kubernetes Secret Access"
          severity: "high"
        action:
          type: "create_incident"
          parameters:
            priority: "P2"
            assign_to: "security-team"
        approval_required: false
        enabled: true
      
      - name: "Compliance Framework Violation"
        description: "Handle compliance framework violations"
        trigger:
          event_type: "compliance"
          framework: "any"
          severity: "medium"
        action:
          type: "create_compliance_ticket"
          parameters:
            priority: "P3"
            assign_to: "compliance-team"
        approval_required: false
        enabled: true

  alert-templates.yaml: |
    # Alert message templates
    templates:
      slack:
        critical: |
          üö® *CRITICAL SECURITY ALERT* üö®
          
          **Event**: {{.RuleName}}
          **Severity**: {{.Severity}}
          **Time**: {{.Timestamp}}
          **Cluster**: {{.ClusterName}}
          **Namespace**: {{.Namespace}}
          **Pod**: {{.PodName}}
          
          **Details**: {{.Description}}
          
          **Remediation**: {{.RemediationAction}}
          **Status**: {{.Status}}
          
          <{{.PlaybookURL}}|View Playbook> | <{{.IncidentURL}}|View Incident>
        
        high: |
          ‚ö†Ô∏è *HIGH SECURITY ALERT* ‚ö†Ô∏è
          
          **Event**: {{.RuleName}}
          **Severity**: {{.Severity}}
          **Time**: {{.Timestamp}}
          **Resource**: {{.Namespace}}/{{.PodName}}
          
          **Details**: {{.Description}}
          **Action**: {{.RemediationAction}}
          
          <{{.PlaybookURL}}|Security Playbook>
        
        medium: |
          üîç *Security Event Detected*
          
          **Event**: {{.RuleName}}
          **Time**: {{.Timestamp}}
          **Resource**: {{.Namespace}}/{{.PodName}}
          **Details**: {{.Description}}
      
      email:
        subject: "[SECURITY ALERT] {{.Severity}} - {{.RuleName}}"
        body: |
          Security Alert Details:
          
          Event: {{.RuleName}}
          Severity: {{.Severity}}
          Timestamp: {{.Timestamp}}
          Cluster: {{.ClusterName}}
          Namespace: {{.Namespace}}
          Pod: {{.PodName}}
          
          Description:
          {{.Description}}
          
          Remediation Action Taken:
          {{.RemediationAction}}
          
          Status: {{.Status}}
          
          Please review the incident details and take appropriate action if necessary.
          
          Incident URL: {{.IncidentURL}}
          Playbook URL: {{.PlaybookURL}}

---
# Security Response Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: security-responder
  namespace: security-response
  annotations:
    security.missing-table.io/description: "Service account for automated security response"
automountServiceAccountToken: true

---
# Security Response ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: security-responder
  labels:
    security.missing-table.io/component: "responder"
rules:
# Read access for monitoring
- apiGroups: ["*"]
  resources: ["*"]
  verbs: ["get", "list", "watch"]
# Write access for remediation
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["delete", "patch", "update"]
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["create", "patch", "update"]
- apiGroups: ["networking.k8s.io"]
  resources: ["networkpolicies"]
  verbs: ["create", "patch", "update", "delete"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create"]
- apiGroups: ["batch"]
  resources: ["jobs"]
  verbs: ["create", "get", "list", "watch", "delete"]
# Access to security resources
- apiGroups: ["constraints.gatekeeper.sh"]
  resources: ["*"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["templates.gatekeeper.sh"]
  resources: ["*"]
  verbs: ["get", "list", "watch"]

---
# Security Response ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: security-responder
  labels:
    security.missing-table.io/component: "responder"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: security-responder
subjects:
- kind: ServiceAccount
  name: security-responder
  namespace: security-response

---
# Security Response Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: security-responder
  namespace: security-response
  labels:
    app: security-responder
    security.missing-table.io/component: "responder"
spec:
  replicas: 2
  selector:
    matchLabels:
      app: security-responder
  template:
    metadata:
      labels:
        app: security-responder
        security.missing-table.io/component: "responder"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: security-responder
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
      containers:
      - name: responder
        image: gcr.io/missing-table-prod/security-responder:v1.0.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 8090
          name: health
          protocol: TCP
        - containerPort: 9090
          name: webhook
          protocol: TCP
        env:
        - name: CONFIG_PATH
          value: "/config"
        - name: LOG_LEVEL
          value: "info"
        - name: CLUSTER_NAME
          value: "missing-table-prod"
        - name: ENVIRONMENT
          value: "production"
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: SLACK_WEBHOOK_URL
          valueFrom:
            secretKeyRef:
              name: notification-secrets
              key: slack-webhook-url
        - name: PAGERDUTY_KEY
          valueFrom:
            secretKeyRef:
              name: notification-secrets
              key: pagerduty-key
        volumeMounts:
        - name: config
          mountPath: /config
          readOnly: true
        - name: tmp
          mountPath: /tmp
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 100m
            memory: 128Mi
        livenessProbe:
          httpGet:
            path: /health
            port: 8090
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /ready
            port: 8090
          initialDelaySeconds: 5
          periodSeconds: 10
      volumes:
      - name: config
        projected:
          sources:
          - configMap:
              name: security-response-config
              items:
              - key: config.yaml
                path: config.yaml
              - key: remediation-rules.yaml
                path: remediation-rules.yaml
              - key: alert-templates.yaml
                path: alert-templates.yaml
      - name: tmp
        emptyDir:
          sizeLimit: 512Mi

---
# Security Response Service
apiVersion: v1
kind: Service
metadata:
  name: security-responder
  namespace: security-response
  labels:
    app: security-responder
    security.missing-table.io/component: "responder"
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: http
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: webhook
  selector:
    app: security-responder

---
# Security Quarantine Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: security-quarantine
  labels:
    name: security-quarantine
    security.missing-table.io/level: "quarantine"
    security.missing-table.io/purpose: "isolation"
  annotations:
    security.missing-table.io/description: "Namespace for quarantined security violations"
---
# Quarantine Network Policy - Default Deny All
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: quarantine-default-deny
  namespace: security-quarantine
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  # No ingress or egress rules = deny all traffic

---
# Security Incident Management
apiVersion: v1
kind: ConfigMap
metadata:
  name: incident-playbooks
  namespace: security-response
data:
  privileged-container.md: |
    # Privileged Container Incident Response
    
    ## Immediate Actions
    1. **ISOLATE**: Pod has been automatically terminated
    2. **INVESTIGATE**: Check pod logs and container image
    3. **ANALYZE**: Determine if this was malicious or misconfiguration
    4. **DOCUMENT**: Record findings in incident ticket
    
    ## Investigation Steps
    ```bash
    # Check pod events
    kubectl get events --sort-by=.metadata.creationTimestamp
    
    # Analyze container image
    trivy image <image-name>
    
    # Check for similar violations
    kubectl get events --all-namespaces | grep -i "privileged"
    ```
    
    ## Remediation
    - Update deployment to remove privileged: true
    - Implement least privilege security context
    - Add security scanning to CI/CD pipeline
    
    ## Prevention
    - Enforce Pod Security Standards
    - Use OPA Gatekeeper policies
    - Regular security training

  network-violation.md: |
    # Network Policy Violation Response
    
    ## Immediate Actions
    1. **ISOLATE**: Pod has been quarantined with network policy
    2. **ASSESS**: Determine if traffic was malicious
    3. **INVESTIGATE**: Check network flow logs
    4. **CONTAIN**: Ensure no lateral movement occurred
    
    ## Investigation Steps
    ```bash
    # Check network policies
    kubectl get networkpolicies -A
    
    # Analyze VPC flow logs
    gcloud logging read "resource.type=gce_subnetwork"
    
    # Check for suspicious connections
    falco logs | grep -i "network"
    ```
    
    ## Remediation
    - Review and update network policies
    - Implement zero-trust networking
    - Monitor network traffic patterns

  compliance-violation.md: |
    # Compliance Violation Response
    
    ## Immediate Actions
    1. **DOCUMENT**: Create compliance ticket
    2. **ASSESS**: Determine compliance impact
    3. **NOTIFY**: Inform compliance team
    4. **REMEDIATE**: Fix configuration issues
    
    ## Investigation Steps
    - Review compliance framework requirements
    - Check audit logs for related violations
    - Assess business impact
    - Document remediation timeline
    
    ## Remediation
    - Update configurations to meet compliance
    - Implement compensating controls if needed
    - Schedule compliance review

---
# Notification Secrets (to be populated with real values)
apiVersion: v1
kind: Secret
metadata:
  name: notification-secrets
  namespace: security-response
  labels:
    security.missing-table.io/component: "notifications"
type: Opaque
data:
  # Base64 encoded notification URLs and keys
  slack-webhook-url: aHR0cHM6Ly9ob29rcy5zbGFjay5jb20vc2VydmljZXMvVDAwMDAwMDAwL0IwMDAwMDAwMC9YWFhYWFhYWFhYWFhYWFhYWFhYWA==
  pagerduty-key: WFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhY
  teams-webhook-url: aHR0cHM6Ly9vdXRsb29rLm9mZmljZS5jb20vd2ViaG9vay9YWFhYWFhYWFhYWFhYWFhYWFhYWA==

---
# Security Response Metrics
apiVersion: v1
kind: ServiceMonitor
metadata:
  name: security-responder
  namespace: security-response
  labels:
    app: security-responder
spec:
  selector:
    matchLabels:
      app: security-responder
  endpoints:
  - port: http
    path: /metrics
    interval: 30s

---
# Alert Manager Rules for Security Response
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: security-response-alerts
  namespace: security-response
  labels:
    prometheus: kube-prometheus
    role: alert-rules
spec:
  groups:
  - name: security.response
    rules:
    - alert: SecurityResponderDown
      expr: up{job="security-responder"} == 0
      for: 5m
      labels:
        severity: critical
        service: security-responder
      annotations:
        summary: "Security responder is down"
        description: "Security response system has been down for more than 5 minutes"
    
    - alert: HighSecurityEventRate
      expr: rate(security_events_total[5m]) > 0.1
      for: 2m
      labels:
        severity: warning
        service: security-monitoring
      annotations:
        summary: "High rate of security events"
        description: "Security event rate is {{ $value }} events per second"
    
    - alert: AutoRemediationFailure
      expr: security_remediation_failures_total > 0
      for: 1m
      labels:
        severity: critical
        service: security-responder
      annotations:
        summary: "Auto-remediation failure"
        description: "{{ $value }} auto-remediation actions have failed"
    
    - alert: ComplianceViolation
      expr: compliance_violations_total > 0
      for: 0m
      labels:
        severity: high
        service: compliance
      annotations:
        summary: "Compliance violation detected"
        description: "{{ $value }} compliance violations detected"