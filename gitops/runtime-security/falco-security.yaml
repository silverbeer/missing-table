# Falco Runtime Security Monitoring for GitOps
# This provides real-time security monitoring and threat detection

apiVersion: v1
kind: Namespace
metadata:
  name: falco-system
  labels:
    name: falco-system
    security.missing-table.io/level: "critical"
    compliance.missing-table.io/framework: "soc2"
    pod-security.kubernetes.io/enforce: privileged  # Falco requires privileged access
    pod-security.kubernetes.io/audit: privileged
    pod-security.kubernetes.io/warn: privileged
---
# Falco Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: falco-config
  namespace: falco-system
  labels:
    app: falco
data:
  falco.yaml: |
    # Falco configuration for runtime security monitoring
    
    # Rules configuration
    rules_file:
      - /etc/falco/falco_rules.yaml
      - /etc/falco/falco_rules.local.yaml
      - /etc/falco/k8s_audit_rules.yaml
      - /etc/falco/rules.d
    
    # Time format for events
    time_format_iso_8601: true
    
    # JSON output configuration
    json_output: true
    json_include_output_property: true
    json_include_tags_property: true
    
    # Logging configuration
    log_stderr: true
    log_syslog: false
    log_level: info
    
    # Priority levels
    priority: debug
    
    # Buffered outputs
    buffered_outputs: false
    
    # Syscall event drops
    syscall_event_drops:
      actions:
        - log
        - alert
      rate: 0.03333
      max_burst: 1000
    
    # Base syscalls
    base_syscalls:
      custom_set: []
      repair: false
    
    # Modern BPF probe
    modern_bpf:
      cpus_for_each_syscall_buffer: 2
    
    # File output for security events
    file_output:
      enabled: true
      keep_alive: false
      filename: /var/log/falco/events.log
    
    # Program output for external processing
    program_output:
      enabled: true
      keep_alive: false
      program: |
        jq -c '. + {"cluster": "'$CLUSTER_NAME'", "environment": "'$ENVIRONMENT'"}'
    
    # Stdout output
    stdout_output:
      enabled: true
    
    # Syslog output
    syslog_output:
      enabled: false
    
    # HTTP output for SIEM integration
    http_output:
      enabled: true
      url: http://security-events-collector:8080/falco-events
      user_agent: "falco/security-monitoring"
      
    # gRPC output for real-time processing
    grpc_output:
      enabled: false
    
    # Webserver for health checks and metrics
    webserver:
      enabled: true
      listen_port: 8765
      k8s_healthz_endpoint: /healthz
      ssl_enabled: false
      ssl_certificate: /etc/ssl/falco/server.pem
    
    # Metadata downloads
    metadata_download:
      max_mb: 100
      chunk_wait_us: 1000
      watch_freq_sec: 1

  falco_rules.local.yaml: |
    # Local Falco rules for Missing Table application
    
    # Custom rules for GitOps security
    - rule: ArgoCD Unauthorized Access
      desc: Detect unauthorized access to ArgoCD resources
      condition: >
        k8s_audit and
        ka.target.namespace = "argocd" and
        ka.verb in (create, update, patch, delete) and
        not ka.user.name in (argocd-server, argocd-application-controller) and
        not ka.user.name startswith "system:"
      output: >
        Unauthorized ArgoCD access detected
        (user=%ka.user.name verb=%ka.verb target=%ka.target.resource 
         namespace=%ka.target.namespace object=%ka.target.name)
      priority: CRITICAL
      tags: [gitops, argocd, unauthorized_access]
    
    - rule: GitOps Security Policy Violation
      desc: Detect violations of GitOps security policies
      condition: >
        k8s_audit and
        ka.target.namespace in (security-scanning, compliance-verification, policy-enforcement) and
        ka.verb in (create, update, patch, delete) and
        not ka.user.name in (security-scanner, compliance-verifier, gatekeeper) and
        not ka.user.name startswith "system:"
      output: >
        GitOps security policy violation
        (user=%ka.user.name verb=%ka.verb target=%ka.target.resource 
         namespace=%ka.target.namespace object=%ka.target.name)
      priority: HIGH
      tags: [gitops, security_policy, violation]
    
    - rule: Privileged Container in Production
      desc: Detect privileged containers in production namespaces
      condition: >
        container and
        k8s.ns.name in (missing-table-prod, argocd) and
        container.privileged = true
      output: >
        Privileged container detected in production
        (user=%user.name command=%proc.cmdline container=%container.name 
         namespace=%k8s.ns.name pod=%k8s.pod.name)
      priority: CRITICAL
      tags: [privileged, production, security_violation]
    
    - rule: Sensitive File Access in Containers
      desc: Detect access to sensitive files within containers
      condition: >
        open_read and
        container and
        fd.name in (/etc/passwd, /etc/shadow, /etc/ssh/ssh_host_rsa_key, 
                    /etc/ssh/ssh_host_dsa_key, /root/.ssh/id_rsa,
                    /home/*/.ssh/id_rsa, /etc/kubernetes/pki/*)
      output: >
        Sensitive file accessed in container
        (user=%user.name command=%proc.cmdline file=%fd.name 
         container=%container.name namespace=%k8s.ns.name)
      priority: HIGH
      tags: [sensitive_files, container_security]
    
    - rule: Network Tool Usage in Container
      desc: Detect usage of network tools that could indicate compromise
      condition: >
        spawned_process and
        container and
        proc.name in (nmap, nc, netcat, ncat, wget, curl) and
        not k8s.ns.name in (kube-system, monitoring)
      output: >
        Network tool used in container
        (user=%user.name command=%proc.cmdline tool=%proc.name 
         container=%container.name namespace=%k8s.ns.name)
      priority: MEDIUM
      tags: [network_tools, potential_compromise]
    
    - rule: Package Manager in Container
      desc: Detect package manager usage which could indicate compromise
      condition: >
        spawned_process and
        container and
        proc.name in (apt, apt-get, yum, rpm, apk, pip, npm) and
        not k8s.ns.name in (kube-system)
      output: >
        Package manager used in container
        (user=%user.name command=%proc.cmdline tool=%proc.name 
         container=%container.name namespace=%k8s.ns.name)
      priority: MEDIUM
      tags: [package_manager, runtime_modification]
    
    - rule: Service Account Token Access
      desc: Detect access to service account tokens
      condition: >
        open_read and
        fd.name contains "/var/run/secrets/kubernetes.io/serviceaccount/token" and
        not proc.name in (kubectl, oc, argocd, falco)
      output: >
        Service account token accessed
        (user=%user.name command=%proc.cmdline file=%fd.name 
         container=%container.name namespace=%k8s.ns.name)
      priority: HIGH
      tags: [service_account, token_access, privilege_escalation]
    
    - rule: Kubernetes Secret Access
      desc: Detect unauthorized access to Kubernetes secrets
      condition: >
        k8s_audit and
        ka.target.resource = "secrets" and
        ka.verb in (get, list, create, update, patch, delete) and
        not ka.user.name startswith "system:" and
        not ka.user.name in (argocd-server, argocd-application-controller)
      output: >
        Kubernetes secret accessed
        (user=%ka.user.name verb=%ka.verb secret=%ka.target.name 
         namespace=%ka.target.namespace)
      priority: HIGH
      tags: [secrets, unauthorized_access]
    
    - rule: Container Drift from Image
      desc: Detect when container filesystem differs from image
      condition: >
        container and
        not proc.name in (pause, falco) and
        proc.pname exists and
        spawned_process
      output: >
        Container drift detected - new process spawned
        (user=%user.name command=%proc.cmdline parent=%proc.pname 
         container=%container.name namespace=%k8s.ns.name)
      priority: MEDIUM
      tags: [container_drift, runtime_changes]
    
    # Compliance-specific rules
    - rule: SOC2 Access Control Violation
      desc: Detect SOC2 access control violations
      condition: >
        k8s_audit and
        ka.verb in (create, update, patch, delete) and
        ka.target.resource in (roles, rolebindings, clusterroles, clusterrolebindings) and
        not ka.user.name startswith "system:"
      output: >
        SOC2 access control change detected
        (user=%ka.user.name verb=%ka.verb resource=%ka.target.resource 
         name=%ka.target.name namespace=%ka.target.namespace)
      priority: HIGH
      tags: [soc2, access_control, compliance]
    
    - rule: PCI DSS Network Segmentation Violation
      desc: Detect potential PCI DSS network segmentation violations
      condition: >
        inbound_outbound and
        fd.sip != "127.0.0.1" and
        fd.sport != 53 and
        k8s.ns.name = "missing-table-prod"
      output: >
        Network connection from production namespace
        (connection=%fd.name direction=%evt.type 
         source=%fd.sip.name destination=%fd.dip.name 
         namespace=%k8s.ns.name pod=%k8s.pod.name)
      priority: MEDIUM
      tags: [pci_dss, network_segmentation, compliance]

  k8s_audit_rules.yaml: |
    # Kubernetes audit rules for enhanced security monitoring
    
    - rule: K8s Audit Logs Available
      desc: Ensure Kubernetes audit logs are being captured
      condition: >
        k8s_audit
      output: >
        Kubernetes audit event captured
        (user=%ka.user.name verb=%ka.verb resource=%ka.target.resource)
      priority: DEBUG
      tags: [k8s_audit]
    
    - rule: Anonymous Access
      desc: Detect anonymous access attempts
      condition: >
        k8s_audit and
        ka.user.name = "system:anonymous"
      output: >
        Anonymous access attempt
        (verb=%ka.verb resource=%ka.target.resource 
         namespace=%ka.target.namespace)
      priority: HIGH
      tags: [anonymous_access, security_violation]
    
    - rule: Cluster Admin Usage
      desc: Monitor cluster admin role usage
      condition: >
        k8s_audit and
        ka.target.resource = "clusterrolebindings" and
        ka.target.name contains "cluster-admin"
      output: >
        Cluster admin role binding modified
        (user=%ka.user.name verb=%ka.verb binding=%ka.target.name)
      priority: CRITICAL
      tags: [cluster_admin, privilege_escalation]

---
# Falco Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: falco
  namespace: falco-system
  labels:
    app: falco
automountServiceAccountToken: true

---
# Falco ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: falco
  labels:
    app: falco
rules:
- apiGroups: [""]
  resources: ["nodes", "namespaces", "pods", "events"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "daemonsets", "replicasets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["extensions"]
  resources: ["deployments", "daemonsets", "replicasets"]
  verbs: ["get", "list", "watch"]

---
# Falco ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: falco
  labels:
    app: falco
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: falco
subjects:
- kind: ServiceAccount
  name: falco
  namespace: falco-system

---
# Falco DaemonSet
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: falco
  namespace: falco-system
  labels:
    app: falco
    security.missing-table.io/component: "runtime-security"
spec:
  selector:
    matchLabels:
      app: falco
  template:
    metadata:
      labels:
        app: falco
        security.missing-table.io/component: "runtime-security"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8765"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: falco
      tolerations:
      - key: node-role.kubernetes.io/control-plane
        operator: Exists
        effect: NoSchedule
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      hostNetwork: true
      hostPID: true
      containers:
      - name: falco
        image: falcosecurity/falco-no-driver:0.36.2
        imagePullPolicy: Always
        env:
        - name: CLUSTER_NAME
          value: "missing-table-prod"
        - name: ENVIRONMENT
          value: "production"
        - name: HOST_ROOT
          value: /host
        - name: FALCO_K8S_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: FALCO_K8S_NAMESPACE_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: FALCO_K8S_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        resources:
          limits:
            cpu: 1000m
            memory: 512Mi
          requests:
            cpu: 100m
            memory: 128Mi
        securityContext:
          privileged: true
          runAsUser: 0
          readOnlyRootFilesystem: false
        ports:
        - containerPort: 8765
          name: http
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8765
          initialDelaySeconds: 60
          periodSeconds: 60
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8765
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
        volumeMounts:
        - name: config
          mountPath: /etc/falco
          readOnly: true
        - name: falco-logs
          mountPath: /var/log/falco
        - name: proc
          mountPath: /host/proc
          readOnly: true
        - name: boot
          mountPath: /host/boot
          readOnly: true
        - name: lib-modules
          mountPath: /host/lib/modules
          readOnly: true
        - name: usr
          mountPath: /host/usr
          readOnly: true
        - name: etc
          mountPath: /host/etc
          readOnly: true
        - name: dev
          mountPath: /host/dev
        - name: sys-fs
          mountPath: /sys/fs
          readOnly: true
        - name: etc-falco
          mountPath: /etc/falco
          readOnly: true
      - name: falco-exporter
        image: falcosecurity/falco-exporter:0.8.3
        imagePullPolicy: Always
        ports:
        - containerPort: 9376
          name: metrics
          protocol: TCP
        env:
        - name: FALCO_ENDPOINT
          value: "unix:///var/run/falco/falco.sock"
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        resources:
          limits:
            cpu: 100m
            memory: 64Mi
          requests:
            cpu: 50m
            memory: 32Mi
        volumeMounts:
        - name: falco-socket
          mountPath: /var/run/falco
      volumes:
      - name: config
        configMap:
          name: falco-config
      - name: falco-logs
        emptyDir:
          sizeLimit: 1Gi
      - name: proc
        hostPath:
          path: /proc
      - name: boot
        hostPath:
          path: /boot
      - name: lib-modules
        hostPath:
          path: /lib/modules
      - name: usr
        hostPath:
          path: /usr
      - name: etc
        hostPath:
          path: /etc
      - name: dev
        hostPath:
          path: /dev
      - name: sys-fs
        hostPath:
          path: /sys/fs
      - name: etc-falco
        configMap:
          name: falco-config
      - name: falco-socket
        emptyDir: {}

---
# Falco Service
apiVersion: v1
kind: Service
metadata:
  name: falco
  namespace: falco-system
  labels:
    app: falco
    security.missing-table.io/component: "runtime-security"
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9376"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - port: 8765
    targetPort: 8765
    protocol: TCP
    name: http
  - port: 9376
    targetPort: 9376
    protocol: TCP
    name: metrics
  selector:
    app: falco

---
# Security Events Collector
apiVersion: apps/v1
kind: Deployment
metadata:
  name: security-events-collector
  namespace: falco-system
  labels:
    app: security-events-collector
    security.missing-table.io/component: "events-collector"
spec:
  replicas: 2
  selector:
    matchLabels:
      app: security-events-collector
  template:
    metadata:
      labels:
        app: security-events-collector
        security.missing-table.io/component: "events-collector"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
      containers:
      - name: collector
        image: gcr.io/missing-table-prod/security-events-collector:v1.0.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 8090
          name: health
          protocol: TCP
        env:
        - name: LOG_LEVEL
          value: "info"
        - name: CLUSTER_NAME
          value: "missing-table-prod"
        - name: ENVIRONMENT
          value: "production"
        - name: ELASTICSEARCH_URL
          value: "http://elasticsearch-audit.audit-logging:9200"
        - name: SLACK_WEBHOOK_URL
          valueFrom:
            secretKeyRef:
              name: security-notifications
              key: slack-webhook-url
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        resources:
          limits:
            cpu: 300m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 128Mi
        livenessProbe:
          httpGet:
            path: /health
            port: 8090
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /ready
            port: 8090
          initialDelaySeconds: 5
          periodSeconds: 10
      volumes:
      - name: tmp
        emptyDir:
          sizeLimit: 512Mi

---
# Security Events Collector Service
apiVersion: v1
kind: Service
metadata:
  name: security-events-collector
  namespace: falco-system
  labels:
    app: security-events-collector
    security.missing-table.io/component: "events-collector"
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: security-events-collector

---
# Security Notifications Secret (needs to be created with actual values)
apiVersion: v1
kind: Secret
metadata:
  name: security-notifications
  namespace: falco-system
  labels:
    security.missing-table.io/component: "notifications"
type: Opaque
data:
  # Base64 encoded Slack webhook URL
  slack-webhook-url: aHR0cHM6Ly9ob29rcy5zbGFjay5jb20vc2VydmljZXMvVDAwMDAwMDAwL0IwMDAwMDAwMC9YWFhYWFhYWFhYWFhYWFhYWFhYWA==
  # Base64 encoded PagerDuty integration key
  pagerduty-key: WFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhY