name: Deploy Match-Scraper to GKE

# Trigger on:
# 1. Manual dispatch (for on-demand deployments)
# 2. Push to main branch (changes to match-scraper integration files)
on:
  workflow_dispatch:
    inputs:
      run_test_job:
        description: 'Create and run a test job after deployment'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'
      skip_build:
        description: 'Skip Docker build (use existing image)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
  push:
    branches:
      - main
    paths:
      - 'k8s/match-scraper-cronjob.yaml'
      - 'helm/missing-table/templates/secrets.yaml'
      - '.github/workflows/deploy-match-scraper.yml'

env:
  GCP_REGION: us-central1
  GKE_CLUSTER: missing-table-dev
  GKE_ZONE: us-central1
  NAMESPACE: missing-table-dev
  REGISTRY: us-central1-docker.pkg.dev/missing-table/missing-table
  IMAGE_NAME: match-scraper
  CRONJOB_NAME: match-scraper

permissions:
  contents: read
  id-token: write  # Required for Workload Identity Federation

jobs:
  # Build and push match-scraper Docker image
  # Note: This builds from the match-scraper repo, not missing-table
  build-and-push:
    runs-on: ubuntu-latest
    if: github.event.inputs.skip_build != 'true'

    outputs:
      image-uri: ${{ steps.build-info.outputs.image-uri }}
      image-digest: ${{ steps.push.outputs.digest }}

    steps:
      - name: Checkout match-scraper repo
        uses: actions/checkout@v4
        with:
          repository: silverbeer/match-scraper
          ref: main
          path: match-scraper

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker us-central1-docker.pkg.dev

      - name: Set build info
        id: build-info
        run: |
          IMAGE_URI="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo "image-uri=${IMAGE_URI}" >> $GITHUB_OUTPUT
          echo "Building image: ${IMAGE_URI}"

      - name: Build Docker image
        working-directory: match-scraper
        run: |
          docker build \
            --platform linux/amd64 \
            -t ${{ steps.build-info.outputs.image-uri }} \
            .

      - name: Push to Artifact Registry
        id: push
        run: |
          docker push ${{ steps.build-info.outputs.image-uri }}

          # Get image digest
          DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' ${{ steps.build-info.outputs.image-uri }} | cut -d'@' -f2)
          echo "digest=${DIGEST}" >> $GITHUB_OUTPUT

          echo "✅ Image pushed successfully"

      - name: Image summary
        run: |
          echo "### 🐳 Docker Image Built" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ steps.build-info.outputs.image-uri }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Digest:** \`${{ steps.push.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Platform:** linux/amd64" >> $GITHUB_STEP_SUMMARY
          echo "**Registry:** Google Artifact Registry" >> $GITHUB_STEP_SUMMARY

  # Deploy to GKE
  deploy:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: always() && (needs.build-and-push.result == 'success' || needs.build-and-push.result == 'skipped')

    steps:
      - name: Checkout missing-table repo
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          install_components: 'gke-gcloud-auth-plugin'

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} \
            --region ${{ env.GCP_REGION }} \
            --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Verify cluster access
        run: |
          kubectl cluster-info
          kubectl get nodes

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: 'latest'

      - name: Update Helm secrets (RabbitMQ config)
        run: |
          echo "📝 Updating Helm release to ensure RabbitMQ secrets are configured..."

          # Check if values-dev.yaml exists in secrets
          if [ ! -f "helm/missing-table/values-dev.yaml" ]; then
            echo "⚠️  values-dev.yaml not found, creating from secrets..."

            # Create values-dev.yaml from GitHub Secrets
            cat > helm/missing-table/values-dev.yaml << EOF
          secrets:
            databaseUrl: "${{ secrets.DATABASE_URL }}"
            supabaseUrl: "${{ secrets.SUPABASE_URL }}"
            supabaseAnonKey: "${{ secrets.SUPABASE_ANON_KEY }}"
            supabaseServiceKey: "${{ secrets.SUPABASE_SERVICE_KEY }}"
            supabaseJwtSecret: "${{ secrets.SUPABASE_JWT_SECRET }}"
            serviceAccountSecret: "${{ secrets.SERVICE_ACCOUNT_SECRET }}"

          rabbitmq:
            username: "${{ secrets.RABBITMQ_USERNAME }}"
            password: "${{ secrets.RABBITMQ_PASSWORD }}"
            host: "messaging-rabbitmq.missing-table-dev.svc.cluster.local"
            port: 5672
          EOF
          fi

          # Deploy Helm release to update secrets
          helm upgrade missing-table ./helm/missing-table \
            -n ${{ env.NAMESPACE }} \
            --values ./helm/missing-table/values-dev.yaml \
            --wait \
            --timeout 5m

          echo "✅ Helm secrets updated"

      - name: Verify RabbitMQ secret
        run: |
          echo "🔍 Verifying RabbitMQ URL secret..."

          if kubectl get secret missing-table-secrets -n ${{ env.NAMESPACE }} -o jsonpath='{.data.rabbitmq-url}' | base64 -d | grep -q "amqp://"; then
            echo "✅ RabbitMQ URL secret verified"
          else
            echo "❌ RabbitMQ URL secret not found or invalid"
            echo "Please ensure RabbitMQ configuration is in values-dev.yaml"
            exit 1
          fi

      - name: Deploy CronJob
        run: |
          echo "📦 Deploying CronJob manifest..."
          kubectl apply -f k8s/match-scraper-cronjob.yaml

          echo "✅ CronJob deployed successfully"

      - name: Verify deployment
        run: |
          echo "📋 Checking CronJob status..."
          kubectl get cronjob ${{ env.CRONJOB_NAME }} -n ${{ env.NAMESPACE }}

          echo ""
          echo "📊 CronJob details:"
          kubectl describe cronjob ${{ env.CRONJOB_NAME }} -n ${{ env.NAMESPACE }}

      - name: Create test job
        if: github.event.inputs.run_test_job == 'true'
        run: |
          echo "🧪 Creating test job..."
          TEST_JOB_NAME="${{ env.CRONJOB_NAME }}-test-$(date +%s)"

          kubectl create job --from=cronjob/${{ env.CRONJOB_NAME }} ${TEST_JOB_NAME} -n ${{ env.NAMESPACE }}

          echo "✅ Test job created: ${TEST_JOB_NAME}"
          echo "TEST_JOB_NAME=${TEST_JOB_NAME}" >> $GITHUB_ENV

          # Wait for pod to be created
          echo "⏳ Waiting for pod to start..."
          sleep 10

          # Get pod name
          POD_NAME=$(kubectl get pods -n ${{ env.NAMESPACE }} -l job-name=${TEST_JOB_NAME} -o jsonpath='{.items[0].metadata.name}')

          if [ -z "$POD_NAME" ]; then
            echo "⚠️  Pod not found yet, check status later"
          else
            echo "📦 Pod: ${POD_NAME}"
            echo "POD_NAME=${POD_NAME}" >> $GITHUB_ENV
          fi

      - name: View test job logs
        if: github.event.inputs.run_test_job == 'true' && env.POD_NAME != ''
        run: |
          echo "📋 Test job logs:"
          kubectl logs ${{ env.POD_NAME }} -n ${{ env.NAMESPACE }} --tail=100 || echo "⚠️  Logs not available yet"

      - name: Deployment summary
        run: |
          echo "### 🚀 Match-Scraper Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Cluster:** \`${{ env.GKE_CLUSTER }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Namespace:** \`${{ env.NAMESPACE }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**CronJob:** \`${{ env.CRONJOB_NAME }}\`" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.build-and-push.result }}" == "success" ]; then
            echo "**Image:** \`${{ needs.build-and-push.outputs.image-uri }}\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Image:** Existing image (build skipped)" >> $GITHUB_STEP_SUMMARY
          fi

          echo "**Deployed at:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "#### 🎯 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Monitor CronJob:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "kubectl get cronjob ${{ env.CRONJOB_NAME }} -n ${{ env.NAMESPACE }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "**View recent jobs:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "kubectl get jobs -n ${{ env.NAMESPACE }} --selector=app=match-scraper" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "**Check RabbitMQ queue:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "kubectl port-forward -n ${{ env.NAMESPACE }} svc/messaging-rabbitmq 15672:15672" >> $GITHUB_STEP_SUMMARY
          echo "# Then open http://localhost:15672 (admin/admin123)" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "**Monitor Celery workers:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "kubectl logs -n ${{ env.NAMESPACE }} deployment/missing-table-celery-worker --tail=50 -f" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

          if [ "${{ github.event.inputs.run_test_job }}" == "true" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Test job created:** \`${{ env.TEST_JOB_NAME }}\`" >> $GITHUB_STEP_SUMMARY
            echo "View logs: \`kubectl logs -f job/${{ env.TEST_JOB_NAME }} -n ${{ env.NAMESPACE }}\`" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Notify on failure
        if: failure()
        run: |
          echo "### ❌ Deployment Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Check the workflow logs for details." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Troubleshooting:**" >> $GITHUB_STEP_SUMMARY
          echo "1. Verify GCP credentials are configured correctly" >> $GITHUB_STEP_SUMMARY
          echo "2. Check that RabbitMQ is running: \`kubectl get pods -n ${{ env.NAMESPACE }} | grep rabbitmq\`" >> $GITHUB_STEP_SUMMARY
          echo "3. Verify secrets exist: \`kubectl get secret missing-table-secrets -n ${{ env.NAMESPACE }}\`" >> $GITHUB_STEP_SUMMARY
          echo "4. Check CronJob events: \`kubectl describe cronjob ${{ env.CRONJOB_NAME }} -n ${{ env.NAMESPACE }}\`" >> $GITHUB_STEP_SUMMARY
