name: Deploy to Production

# Trigger on:
# 1. Manual dispatch (for controlled prod deployments)
# 2. Push to main branch (automatic deployment)
on:
  workflow_dispatch:
    inputs:
      skip_backend_build:
        description: 'Skip backend Docker build (use existing image)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      skip_frontend_build:
        description: 'Skip frontend Docker build (use existing image)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'helm/**'
      - '.github/workflows/deploy-production.yml'

env:
  GCP_REGION: us-central1
  GKE_CLUSTER: missing-table-prod
  GKE_ZONE: us-central1
  NAMESPACE: missing-table-prod
  REGISTRY: us-central1-docker.pkg.dev/missing-table/missing-table
  DOMAIN: missingtable.com
  STATIC_IP_NAME: missing-table-prod-ip

permissions:
  contents: read
  id-token: write  # Required for Workload Identity Federation

jobs:
  # Build and push backend Docker image
  build-backend:
    runs-on: ubuntu-latest
    if: github.event.inputs.skip_backend_build != 'true'

    outputs:
      image-uri: ${{ steps.build-info.outputs.image-uri }}
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version
        id: version
        run: |
          if [ -f VERSION ]; then
            VERSION=$(cat VERSION)
          else
            VERSION="1.0.0"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "📦 Version: ${VERSION}"

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker us-central1-docker.pkg.dev

      - name: Set build info
        id: build-info
        run: |
          IMAGE_URI="${{ env.REGISTRY }}/backend:${{ steps.version.outputs.version }}"
          echo "image-uri=${IMAGE_URI}" >> $GITHUB_OUTPUT
          echo "Building backend image: ${IMAGE_URI}"

      - name: Build backend Docker image
        run: |
          cd backend
          docker build \
            --platform linux/amd64 \
            --build-arg APP_VERSION=${{ steps.version.outputs.version }} \
            --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
            --build-arg COMMIT_SHA=${{ github.sha }} \
            -t ${{ steps.build-info.outputs.image-uri }} \
            -t ${{ env.REGISTRY }}/backend:latest \
            -t ${{ env.REGISTRY }}/backend:prod \
            .

      - name: Push backend to Artifact Registry
        run: |
          docker push ${{ steps.build-info.outputs.image-uri }}
          docker push ${{ env.REGISTRY }}/backend:latest
          docker push ${{ env.REGISTRY }}/backend:prod
          echo "✅ Backend image pushed successfully"

      - name: Backend build summary
        run: |
          echo "### 🐳 Backend Image Built" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ steps.build-info.outputs.image-uri }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** \`${{ steps.version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Platform:** linux/amd64" >> $GITHUB_STEP_SUMMARY

  # Build and push frontend Docker image
  build-frontend:
    runs-on: ubuntu-latest
    if: github.event.inputs.skip_frontend_build != 'true'

    outputs:
      image-uri: ${{ steps.build-info.outputs.image-uri }}
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version
        id: version
        run: |
          if [ -f VERSION ]; then
            VERSION=$(cat VERSION)
          else
            VERSION="1.0.0"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "📦 Version: ${VERSION}"

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker us-central1-docker.pkg.dev

      - name: Set build info
        id: build-info
        run: |
          IMAGE_URI="${{ env.REGISTRY }}/frontend:${{ steps.version.outputs.version }}"
          echo "image-uri=${IMAGE_URI}" >> $GITHUB_OUTPUT
          echo "Building frontend image: ${IMAGE_URI}"

      - name: Build frontend Docker image
        run: |
          cd frontend
          docker build \
            --platform linux/amd64 \
            --build-arg VUE_APP_API_URL=https://${{ env.DOMAIN }} \
            --build-arg APP_VERSION=${{ steps.version.outputs.version }} \
            -t ${{ steps.build-info.outputs.image-uri }} \
            -t ${{ env.REGISTRY }}/frontend:latest \
            -t ${{ env.REGISTRY }}/frontend:prod \
            .

      - name: Push frontend to Artifact Registry
        run: |
          docker push ${{ steps.build-info.outputs.image-uri }}
          docker push ${{ env.REGISTRY }}/frontend:latest
          docker push ${{ env.REGISTRY }}/frontend:prod
          echo "✅ Frontend image pushed successfully"

      - name: Frontend build summary
        run: |
          echo "### 🐳 Frontend Image Built" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ steps.build-info.outputs.image-uri }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** \`${{ steps.version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**API URL:** \`https://${{ env.DOMAIN }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Platform:** linux/amd64" >> $GITHUB_STEP_SUMMARY

  # Deploy to GKE Production
  deploy:
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    if: always() && (needs.build-backend.result == 'success' || needs.build-backend.result == 'skipped') && (needs.build-frontend.result == 'success' || needs.build-frontend.result == 'skipped')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          install_components: 'gke-gcloud-auth-plugin'

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} \
            --region ${{ env.GCP_REGION }} \
            --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Verify cluster access
        run: |
          kubectl cluster-info
          kubectl get nodes

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: 'latest'

      - name: Create Helm values file
        run: |
          echo "📝 Creating production Helm values..."

          cat > helm/missing-table/values-prod.yaml << EOF
          namespace: ${{ env.NAMESPACE }}

          backend:
            image:
              repository: ${{ env.REGISTRY }}/backend
              tag: prod
              pullPolicy: IfNotPresent
            replicas: 2
            resources:
              requests:
                cpu: "250m"
                memory: "512Mi"
              limits:
                cpu: "1000m"
                memory: "1Gi"

          frontend:
            image:
              repository: ${{ env.REGISTRY }}/frontend
              tag: prod
              pullPolicy: IfNotPresent
            replicas: 2
            resources:
              requests:
                cpu: "100m"
                memory: "256Mi"
              limits:
                cpu: "500m"
                memory: "512Mi"

          celeryWorker:
            enabled: false
            replicaCount: 0

          ingress:
            enabled: true
            host: ${{ env.DOMAIN }}
            staticIPName: ${{ env.STATIC_IP_NAME }}
            tls:
              enabled: true
              managedCertificate: true

          secrets:
            databaseUrl: "${{ secrets.PROD_DATABASE_URL }}"
            supabaseUrl: "${{ secrets.PROD_SUPABASE_URL }}"
            supabaseAnonKey: "${{ secrets.PROD_SUPABASE_ANON_KEY }}"
            supabaseServiceKey: "${{ secrets.PROD_SUPABASE_SERVICE_KEY }}"
            supabaseJwtSecret: "${{ secrets.PROD_SUPABASE_JWT_SECRET }}"
            serviceAccountSecret: "${{ secrets.PROD_SERVICE_ACCOUNT_SECRET }}"

          environment: production

          security:
            enabled: true
          EOF

          echo "✅ Helm values created"

      - name: Deploy with Helm
        run: |
          echo "🚀 Deploying to production..."

          helm upgrade missing-table ./helm/missing-table \
            -n ${{ env.NAMESPACE }} \
            --values ./helm/missing-table/values-prod.yaml \
            --install \
            --create-namespace \
            --atomic \
            --timeout 10m \
            --wait

          echo "✅ Helm deployment complete"

      - name: Wait for pods to be ready
        run: |
          echo "⏳ Waiting for pods to be ready..."

          kubectl wait --for=condition=ready pod \
            -l app=backend \
            -n ${{ env.NAMESPACE }} \
            --timeout=300s

          kubectl wait --for=condition=ready pod \
            -l app=frontend \
            -n ${{ env.NAMESPACE }} \
            --timeout=300s

          echo "✅ All pods ready"

      - name: Verify deployment
        run: |
          echo "📋 Deployment status:"
          kubectl get pods -n ${{ env.NAMESPACE }}
          echo ""
          kubectl get services -n ${{ env.NAMESPACE }}
          echo ""
          kubectl get ingress -n ${{ env.NAMESPACE }}

      - name: Check SSL certificate
        run: |
          echo "🔒 SSL Certificate status:"
          kubectl get managedcertificate -n ${{ env.NAMESPACE }} || echo "Certificate provisioning..."

      - name: Health check
        run: |
          echo "🏥 Running health checks..."

          # Get backend service ClusterIP
          BACKEND_IP=$(kubectl get svc missing-table-backend -n ${{ env.NAMESPACE }} -o jsonpath='{.spec.clusterIP}')

          # Health check via pod exec (since external DNS may not be ready yet)
          BACKEND_POD=$(kubectl get pods -n ${{ env.NAMESPACE }} -l app=backend -o jsonpath='{.items[0].metadata.name}')

          echo "Testing backend health endpoint..."
          kubectl exec -n ${{ env.NAMESPACE }} ${BACKEND_POD} -- curl -f http://localhost:8000/api/health || {
            echo "❌ Backend health check failed"
            exit 1
          }

          echo "✅ Health checks passed"

      - name: Deployment summary
        run: |
          echo "### 🚀 Production Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** Production" >> $GITHUB_STEP_SUMMARY
          echo "**Cluster:** \`${{ env.GKE_CLUSTER }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Namespace:** \`${{ env.NAMESPACE }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Domain:** https://${{ env.DOMAIN }}" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.build-backend.result }}" == "success" ]; then
            echo "**Backend:** \`${{ needs.build-backend.outputs.image-uri }}\`" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.build-frontend.result }}" == "success" ]; then
            echo "**Frontend:** \`${{ needs.build-frontend.outputs.image-uri }}\`" >> $GITHUB_STEP_SUMMARY
          fi

          echo "**Deployed at:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "#### 🎯 Post-Deployment Steps" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. **Verify DNS**: \`dig ${{ env.DOMAIN }}\` should return \`35.190.120.93\`" >> $GITHUB_STEP_SUMMARY
          echo "2. **Wait for SSL** (10-20 minutes): \`kubectl get managedcertificate -n ${{ env.NAMESPACE }}\`" >> $GITHUB_STEP_SUMMARY
          echo "3. **Test site**: Visit https://${{ env.DOMAIN }}" >> $GITHUB_STEP_SUMMARY
          echo "4. **Monitor**: \`kubectl logs -f deployment/missing-table-backend -n ${{ env.NAMESPACE }}\`" >> $GITHUB_STEP_SUMMARY

      - name: Notify on failure
        if: failure()
        run: |
          echo "### ❌ Production Deployment Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Check the workflow logs for details." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Troubleshooting:**" >> $GITHUB_STEP_SUMMARY
          echo "1. Check pod status: \`kubectl get pods -n ${{ env.NAMESPACE }}\`" >> $GITHUB_STEP_SUMMARY
          echo "2. View logs: \`kubectl logs -n ${{ env.NAMESPACE }} -l app=backend\`" >> $GITHUB_STEP_SUMMARY
          echo "3. Check events: \`kubectl get events -n ${{ env.NAMESPACE }} --sort-by='.lastTimestamp'\`" >> $GITHUB_STEP_SUMMARY
          echo "4. Rollback if needed: \`helm rollback missing-table -n ${{ env.NAMESPACE }}\`" >> $GITHUB_STEP_SUMMARY
