name: Deploy to Production

# Trigger on:
# 1. Push to main branch (merged PRs)
# 2. Manual dispatch (for emergency deployments)
on:
  push:
    branches:
      - main
    paths-ignore:
      - 'docs/**'
      - '**.md'
      - '.github/workflows/security-scan.yml'
      - '.github/workflows/deploy-dev.yml'
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip health checks after deployment'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      create_git_tag:
        description: 'Create git tag for this release'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

env:
  GCP_REGION: us-central1
  GKE_CLUSTER: missing-table-prod
  GKE_ZONE: us-central1
  NAMESPACE: missing-table-prod
  REGISTRY: us-central1-docker.pkg.dev/missing-table/missing-table
  ENVIRONMENT: prod

# Prevent concurrent production deployments
concurrency:
  group: production-deployment
  cancel-in-progress: false  # Let current deployment finish, queue the new one

permissions:
  contents: write  # Required to create git tags
  id-token: write  # Required for Workload Identity Federation

jobs:
  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.version-info.outputs.version }}
      full-version: ${{ steps.version-info.outputs.full-version }}
      backend-image: ${{ steps.image-info.outputs.backend-image }}
      frontend-image: ${{ steps.image-info.outputs.frontend-image }}
      commit-sha: ${{ steps.version-info.outputs.commit-sha }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set version information
        id: version-info
        run: |
          # Read version from VERSION file
          VERSION=$(cat VERSION | tr -d '\n\r' | tr -d ' ')
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

          # Create full version with build ID (workflow run ID)
          FULL_VERSION="v${VERSION}-build.${{ github.run_id }}"
          echo "full-version=${FULL_VERSION}" >> $GITHUB_OUTPUT

          # Set commit SHA (short)
          COMMIT_SHA=$(git rev-parse --short HEAD)
          echo "commit-sha=${COMMIT_SHA}" >> $GITHUB_OUTPUT

          echo "üì¶ Version: ${FULL_VERSION}"
          echo "üìù Commit: ${COMMIT_SHA}"
          echo "üè∑Ô∏è  Tag will be: v${VERSION}"

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker us-central1-docker.pkg.dev

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push backend
        env:
          BUILD_ID: ${{ github.run_id }}
        run: |
          echo "üî® Building backend for production environment..."

          # Use build-and-push.sh script with version support
          # This creates multiple tags: prod, v{VERSION}-build.{ID}, v{VERSION}, latest
          ./build-and-push.sh backend prod

      - name: Build and push frontend
        env:
          BUILD_ID: ${{ github.run_id }}
        run: |
          echo "üî® Building frontend for production environment..."

          # Use build-and-push.sh script with version support
          ./build-and-push.sh frontend prod

      - name: Set image info for deployment
        id: image-info
        run: |
          VERSION="${{ steps.version-info.outputs.version }}"
          FULL_VERSION="${{ steps.version-info.outputs.full-version }}"

          # Images are tagged with environment tag (prod) and version tags
          BACKEND_IMAGE="${{ env.REGISTRY }}/backend:prod"
          FRONTEND_IMAGE="${{ env.REGISTRY }}/frontend:prod"

          echo "backend-image=${BACKEND_IMAGE}" >> $GITHUB_OUTPUT
          echo "frontend-image=${FRONTEND_IMAGE}" >> $GITHUB_OUTPUT

          echo "üê≥ Backend: ${BACKEND_IMAGE}"
          echo "üê≥ Frontend: ${FRONTEND_IMAGE}"

      - name: Build summary
        run: |
          echo "### üê≥ Docker Images Built for Production" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** \`${{ steps.version-info.outputs.full-version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ steps.version-info.outputs.commit-sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** \`production\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Images:**" >> $GITHUB_STEP_SUMMARY
          echo "- Backend: \`${{ steps.image-info.outputs.backend-image }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend: \`${{ steps.image-info.outputs.frontend-image }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tags created:**" >> $GITHUB_STEP_SUMMARY
          echo "- \`prod\` (environment tag)" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ steps.version-info.outputs.full-version }}\` (version with build ID)" >> $GITHUB_STEP_SUMMARY
          echo "- \`v${{ steps.version-info.outputs.version }}\` (semantic version)" >> $GITHUB_STEP_SUMMARY
          echo "- \`latest\` (latest production release)" >> $GITHUB_STEP_SUMMARY

  deploy:
    name: Deploy to GKE Production
    runs-on: ubuntu-latest
    needs: [build-and-push]
    environment:
      name: production
      url: https://missingtable.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          install_components: 'gke-gcloud-auth-plugin'

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} \
            --region ${{ env.GCP_REGION }} \
            --project missing-table

      - name: Verify cluster access
        run: |
          kubectl cluster-info
          kubectl get nodes

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: 'latest'

      - name: Create Helm values file
        run: |
          echo "üìù Creating Helm values file for production environment..."

          cat > helm/missing-table/values-prod.yaml << EOF
          namespace: ${{ env.NAMESPACE }}

          backend:
            image:
              repository: ${{ env.REGISTRY }}/backend
              tag: prod
            replicas: 2

          frontend:
            image:
              repository: ${{ env.REGISTRY }}/frontend
              tag: prod
            replicas: 2

          celeryWorker:
            enabled: false
            image:
              repository: ${{ env.REGISTRY }}/backend
              tag: prod
            replicas: 2
            rabbitmq:
              username: "${{ secrets.RABBITMQ_USERNAME_PROD }}"
              password: "${{ secrets.RABBITMQ_PASSWORD_PROD }}"
              host: "messaging-rabbitmq.messaging.svc.cluster.local"
              port: 5672

          secrets:
            databaseUrl: "${{ secrets.DATABASE_URL_PROD }}"
            supabaseUrl: "${{ secrets.SUPABASE_URL_PROD }}"
            supabaseAnonKey: "${{ secrets.SUPABASE_ANON_KEY_PROD }}"
            supabaseServiceKey: "${{ secrets.SUPABASE_SERVICE_KEY_PROD }}"
            supabaseJwtSecret: "${{ secrets.SUPABASE_JWT_SECRET_PROD }}"
            serviceAccountSecret: "${{ secrets.SERVICE_ACCOUNT_SECRET_PROD }}"

          disableSecurity: false

          cors:
            origins: "https://missingtable.com,https://www.missingtable.com"
          EOF

          echo "‚úÖ Helm values file created"

      - name: Backup current deployment
        id: backup
        run: |
          echo "üíæ Creating backup of current deployment..."

          # Get current revision
          CURRENT_REVISION=$(helm history missing-table -n ${{ env.NAMESPACE }} --max 1 -o json | jq -r '.[0].revision' || echo "0")
          echo "current-revision=${CURRENT_REVISION}" >> $GITHUB_OUTPUT

          # Get current image versions
          CURRENT_BACKEND=$(kubectl get deployment missing-table-backend -n ${{ env.NAMESPACE }} -o jsonpath='{.spec.template.spec.containers[0].image}' || echo "none")
          CURRENT_FRONTEND=$(kubectl get deployment missing-table-frontend -n ${{ env.NAMESPACE }} -o jsonpath='{.spec.template.spec.containers[0].image}' || echo "none")

          echo "current-backend=${CURRENT_BACKEND}" >> $GITHUB_OUTPUT
          echo "current-frontend=${CURRENT_FRONTEND}" >> $GITHUB_OUTPUT

          echo "üìä Current state:"
          echo "  Revision: ${CURRENT_REVISION}"
          echo "  Backend: ${CURRENT_BACKEND}"
          echo "  Frontend: ${CURRENT_FRONTEND}"

      - name: Deploy with Helm (with automatic rollback)
        id: deploy
        run: |
          echo "üöÄ Deploying to ${{ env.NAMESPACE }} namespace..."
          echo "‚ö†Ô∏è  Using --atomic flag for automatic rollback on failure"

          # Deploy with --atomic flag which automatically rolls back on failure
          helm upgrade missing-table ./helm/missing-table \
            --namespace ${{ env.NAMESPACE }} \
            --values ./helm/missing-table/values-prod.yaml \
            --install \
            --wait \
            --timeout 15m \
            --atomic \
            --cleanup-on-fail

          echo "‚úÖ Deployment successful"

      - name: Verify deployment
        run: |
          echo "üìã Verifying deployment status..."

          # Check backend deployment
          kubectl rollout status deployment/missing-table-backend -n ${{ env.NAMESPACE }} --timeout=5m

          # Check frontend deployment
          kubectl rollout status deployment/missing-table-frontend -n ${{ env.NAMESPACE }} --timeout=5m

          # Check celery worker deployment (if enabled)
          # NOTE: Currently disabled until RabbitMQ/Celery integration is complete
          # kubectl rollout status deployment/missing-table-celery-worker -n ${{ env.NAMESPACE }} --timeout=5m

          echo "‚úÖ All deployments are ready"

      - name: Get deployment info
        id: deployment-info
        run: |
          echo "üìä Getting deployment information..."

          # Get new revision
          NEW_REVISION=$(helm history missing-table -n ${{ env.NAMESPACE }} --max 1 -o json | jq -r '.[0].revision')
          echo "new-revision=${NEW_REVISION}" >> $GITHUB_OUTPUT

          # Get pod information
          echo "Pods:"
          kubectl get pods -n ${{ env.NAMESPACE }} -l app.kubernetes.io/name=missing-table

          # Get service information
          echo ""
          echo "Services:"
          kubectl get services -n ${{ env.NAMESPACE }}

          # Get ingress information
          echo ""
          echo "Ingress:"
          kubectl get ingress -n ${{ env.NAMESPACE }}

          # Set deployment URL
          DEPLOYMENT_URL="https://missingtable.com"
          echo "deployment-url=${DEPLOYMENT_URL}" >> $GITHUB_OUTPUT

      - name: Run health checks
        if: github.event.inputs.skip_tests != 'true'
        run: |
          echo "üè• Running comprehensive health checks..."

          # Wait for services to stabilize
          sleep 15

          # Check backend health endpoint
          BACKEND_URL="https://missingtable.com/health"
          echo "Checking backend health: ${BACKEND_URL}"

          MAX_RETRIES=10
          RETRY_DELAY=15

          for i in $(seq 1 $MAX_RETRIES); do
            if curl -f -s "${BACKEND_URL}" > /dev/null; then
              echo "‚úÖ Backend health check passed"
              break
            else
              if [ $i -eq $MAX_RETRIES ]; then
                echo "‚ùå Backend health check failed after ${MAX_RETRIES} attempts"
                echo "üîÑ Helm will automatically rollback due to --atomic flag"
                exit 1
              fi
              echo "‚è≥ Attempt $i/$MAX_RETRIES failed, retrying in ${RETRY_DELAY}s..."
              sleep $RETRY_DELAY
            fi
          done

          # Check frontend
          FRONTEND_URL="https://missingtable.com"
          echo "Checking frontend: ${FRONTEND_URL}"

          if curl -f -s "${FRONTEND_URL}" > /dev/null; then
            echo "‚úÖ Frontend check passed"
          else
            echo "‚ùå Frontend check failed"
            echo "üîÑ Helm will automatically rollback due to --atomic flag"
            exit 1
          fi

          # Check version endpoint
          VERSION_URL="https://missingtable.com/api/version"
          echo "Checking version endpoint: ${VERSION_URL}"

          VERSION_INFO=$(curl -s "${VERSION_URL}")
          echo "Version info: ${VERSION_INFO}"

          # Verify correct version is deployed
          DEPLOYED_VERSION=$(echo $VERSION_INFO | jq -r '.version')
          EXPECTED_VERSION="${{ needs.build-and-push.outputs.full-version }}"

          if echo "$DEPLOYED_VERSION" | grep -q "${{ needs.build-and-push.outputs.version }}"; then
            echo "‚úÖ Correct version deployed: ${DEPLOYED_VERSION}"
          else
            echo "‚ö†Ô∏è  Version mismatch - Expected: ${EXPECTED_VERSION}, Got: ${DEPLOYED_VERSION}"
          fi

          # Check API endpoints
          echo "Checking API endpoints..."
          curl -f -s "https://missingtable.com/api/standings" > /dev/null && echo "‚úÖ Standings API OK" || echo "‚ùå Standings API failed"
          curl -f -s "https://missingtable.com/api/matches" > /dev/null && echo "‚úÖ Matches API OK" || echo "‚ùå Matches API failed"

          echo "‚úÖ All health checks passed"

      - name: Create git tag
        if: (github.event.inputs.create_git_tag != 'false') && success()
        run: |
          echo "üè∑Ô∏è  Creating git tag for release..."

          VERSION="${{ needs.build-and-push.outputs.version }}"
          TAG_NAME="v${VERSION}"
          FULL_VERSION="${{ needs.build-and-push.outputs.full-version }}"

          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Create annotated tag
          git tag -a "${TAG_NAME}" -m "Release ${FULL_VERSION}

          Deployed to production at $(date -u)
          Workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

          Build ID: ${{ github.run_id }}
          Commit: ${{ needs.build-and-push.outputs.commit-sha }}"

          # Push tag
          git push origin "${TAG_NAME}"

          echo "‚úÖ Git tag created: ${TAG_NAME}"

      - name: Deployment summary
        if: success()
        run: |
          echo "### üöÄ Production Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** \`production\`" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** \`${{ needs.build-and-push.outputs.full-version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Git Tag:** \`v${{ needs.build-and-push.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Cluster:** \`${{ env.GKE_CLUSTER }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Namespace:** \`${{ env.NAMESPACE }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Helm Revision:** \`${{ steps.deployment-info.outputs.new-revision }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Deployed at:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**üåê Application URL:** https://missingtable.com" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### üì¶ Deployed Images" >> $GITHUB_STEP_SUMMARY
          echo "- Backend: \`${{ needs.build-and-push.outputs.backend-image }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend: \`${{ needs.build-and-push.outputs.frontend-image }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### üîÑ Rollback Information" >> $GITHUB_STEP_SUMMARY
          echo "Previous revision: \`${{ steps.backup.outputs.current-revision }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "To rollback if needed:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "helm rollback missing-table ${{ steps.backup.outputs.current-revision }} -n ${{ env.NAMESPACE }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### üéØ Monitoring Commands" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# View backend logs" >> $GITHUB_STEP_SUMMARY
          echo "kubectl logs -f -l app.kubernetes.io/component=backend -n ${{ env.NAMESPACE }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# View frontend logs" >> $GITHUB_STEP_SUMMARY
          echo "kubectl logs -f -l app.kubernetes.io/component=frontend -n ${{ env.NAMESPACE }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Check deployment status" >> $GITHUB_STEP_SUMMARY
          echo "kubectl get deployments -n ${{ env.NAMESPACE }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# View Helm history" >> $GITHUB_STEP_SUMMARY
          echo "helm history missing-table -n ${{ env.NAMESPACE }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Rollback summary
        if: failure()
        run: |
          echo "### ‚ùå Production Deployment Failed - Automatic Rollback Triggered" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The deployment failed health checks and Helm automatically rolled back to the previous revision." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Previous State (restored):**" >> $GITHUB_STEP_SUMMARY
          echo "- Revision: \`${{ steps.backup.outputs.current-revision }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Backend: \`${{ steps.backup.outputs.current-backend }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend: \`${{ steps.backup.outputs.current-frontend }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### üîç Troubleshooting Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Check workflow logs above for specific error messages" >> $GITHUB_STEP_SUMMARY
          echo "2. Verify health check endpoints are working: \`curl https://missingtable.com/health\`" >> $GITHUB_STEP_SUMMARY
          echo "3. Check pod status: \`kubectl get pods -n ${{ env.NAMESPACE }}\`" >> $GITHUB_STEP_SUMMARY
          echo "4. Check pod logs: \`kubectl logs -l app.kubernetes.io/name=missing-table -n ${{ env.NAMESPACE }}\`" >> $GITHUB_STEP_SUMMARY
          echo "5. Check events: \`kubectl get events -n ${{ env.NAMESPACE }} --sort-by='.lastTimestamp'\`" >> $GITHUB_STEP_SUMMARY
          echo "6. Check Helm status: \`helm status missing-table -n ${{ env.NAMESPACE }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Production site should still be operational on the previous version.**" >> $GITHUB_STEP_SUMMARY

      - name: Notify on failure
        if: failure()
        run: |
          echo "üîî Production deployment failed and was automatically rolled back."
          echo "Previous version has been restored."
          echo "Please check the logs and fix issues before retrying."
