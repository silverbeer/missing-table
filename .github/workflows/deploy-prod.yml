name: Deploy to Production

# Trigger on:
# 1. Push to main branch (merged PRs)
# 2. Manual dispatch (for emergency deployments)
on:
  push:
    branches:
      - main
    paths-ignore:
      - 'docs/**'
      - '**.md'
      - '.github/workflows/security-scan.yml'
      - '.github/workflows/deploy-dev.yml'
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip health checks after deployment'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      create_git_tag:
        description: 'Create git tag for this release'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

env:
  GCP_REGION: us-central1
  GKE_CLUSTER: missing-table-dev  # Use dev cluster for both environments
  NAMESPACE: missing-table-prod  # But separate namespace for prod
  REGISTRY: us-central1-docker.pkg.dev/missing-table/missing-table
  ENVIRONMENT: prod

# Prevent concurrent production deployments
concurrency:
  group: production-deployment
  cancel-in-progress: false  # Let current deployment finish, queue the new one

permissions:
  contents: write  # Required to create git tags
  id-token: write  # Required for Workload Identity Federation

jobs:
  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.version-info.outputs.version }}
      full-version: ${{ steps.version-info.outputs.full-version }}
      backend-image: ${{ steps.image-info.outputs.backend-image }}
      frontend-image: ${{ steps.image-info.outputs.frontend-image }}
      commit-sha: ${{ steps.version-info.outputs.commit-sha }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set version information
        id: version-info
        run: |
          # Read version from VERSION file
          VERSION=$(cat VERSION | tr -d '\n\r' | tr -d ' ')
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

          # Create full version with build ID (workflow run ID)
          FULL_VERSION="v${VERSION}-build.${{ github.run_id }}"
          echo "full-version=${FULL_VERSION}" >> $GITHUB_OUTPUT

          # Set commit SHA (short)
          COMMIT_SHA=$(git rev-parse --short HEAD)
          echo "commit-sha=${COMMIT_SHA}" >> $GITHUB_OUTPUT

          echo "📦 Version: ${FULL_VERSION}"
          echo "📝 Commit: ${COMMIT_SHA}"
          echo "🏷️  Tag will be: v${VERSION}"

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker us-central1-docker.pkg.dev

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push backend
        env:
          BUILD_ID: ${{ github.run_id }}
        run: |
          echo "🔨 Building backend for production environment..."

          # Use build-and-push.sh script with version support
          # This creates multiple tags: prod, v{VERSION}-build.{ID}, v{VERSION}, latest
          ./build-and-push.sh backend prod

      - name: Build and push frontend
        env:
          BUILD_ID: ${{ github.run_id }}
        run: |
          echo "🔨 Building frontend for production environment..."

          # Use build-and-push.sh script with version support
          ./build-and-push.sh frontend prod

      - name: Set image info for deployment
        id: image-info
        run: |
          VERSION="${{ steps.version-info.outputs.version }}"
          FULL_VERSION="${{ steps.version-info.outputs.full-version }}"

          # Images are tagged with environment tag (prod) and version tags
          BACKEND_IMAGE="${{ env.REGISTRY }}/backend:prod"
          FRONTEND_IMAGE="${{ env.REGISTRY }}/frontend:prod"

          echo "backend-image=${BACKEND_IMAGE}" >> $GITHUB_OUTPUT
          echo "frontend-image=${FRONTEND_IMAGE}" >> $GITHUB_OUTPUT

          echo "🐳 Backend: ${BACKEND_IMAGE}"
          echo "🐳 Frontend: ${FRONTEND_IMAGE}"

      - name: Build summary
        run: |
          echo "### 🐳 Docker Images Built for Production" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** \`${{ steps.version-info.outputs.full-version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ steps.version-info.outputs.commit-sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** \`production\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Images:**" >> $GITHUB_STEP_SUMMARY
          echo "- Backend: \`${{ steps.image-info.outputs.backend-image }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend: \`${{ steps.image-info.outputs.frontend-image }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tags created:**" >> $GITHUB_STEP_SUMMARY
          echo "- \`prod\` (environment tag)" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ steps.version-info.outputs.full-version }}\` (version with build ID)" >> $GITHUB_STEP_SUMMARY
          echo "- \`v${{ steps.version-info.outputs.version }}\` (semantic version)" >> $GITHUB_STEP_SUMMARY
          echo "- \`latest\` (latest production release)" >> $GITHUB_STEP_SUMMARY

  deploy:
    name: Deploy to GKE Production
    needs: [build-and-push]
    uses: ./.github/workflows/deploy-reusable.yml
    with:
      environment: prod
      namespace: missing-table-prod
      gke_cluster: missing-table-dev  # Use dev cluster with separate namespace
      gcp_region: us-central1
      deployment_url: https://missingtable.com
      replica_count_backend: 2  # Production uses 2 replicas for HA
      replica_count_frontend: 2  # Production uses 2 replicas for HA
      helm_timeout: '15m'  # Longer timeout for production
      health_check_retries: 10  # More retries for production
      health_check_delay: 15  # Longer delay between retries
      enable_backup: true  # Enable backup and automatic rollback
      enable_git_tag: ${{ github.event.inputs.create_git_tag != 'false' }}  # Create git tags for production
      enable_pr_comment: false  # Don't comment on PRs for production
      skip_tests: ${{ github.event.inputs.skip_tests == 'true' }}
      cors_origins: 'https://missingtable.com,https://www.missingtable.com'
      backend_resources_requests_cpu: '500m'  # Higher for production
      backend_resources_requests_memory: '1Gi'
      backend_resources_limits_cpu: '2000m'
      backend_resources_limits_memory: '2Gi'
      frontend_resources_requests_cpu: '500m'  # Higher for production
      frontend_resources_requests_memory: '512Mi'
      frontend_resources_limits_cpu: '1000m'
      frontend_resources_limits_memory: '1Gi'
      commit_sha: ${{ needs.build-and-push.outputs.commit-sha }}
      version: ${{ needs.build-and-push.outputs.version }}
      full_version: ${{ needs.build-and-push.outputs.full-version }}
      backend_image: ${{ needs.build-and-push.outputs.backend-image }}
      frontend_image: ${{ needs.build-and-push.outputs.frontend-image }}
    secrets:
      GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
      DATABASE_URL: ${{ secrets.DATABASE_URL_PROD }}
      SUPABASE_URL: ${{ secrets.SUPABASE_URL_PROD }}
      SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY_PROD }}
      SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY_PROD }}
      SUPABASE_JWT_SECRET: ${{ secrets.SUPABASE_JWT_SECRET_PROD }}
      SERVICE_ACCOUNT_SECRET: ${{ secrets.SERVICE_ACCOUNT_SECRET_PROD }}
      RABBITMQ_USERNAME: ${{ secrets.RABBITMQ_USERNAME_PROD }}
      RABBITMQ_PASSWORD: ${{ secrets.RABBITMQ_PASSWORD_PROD }}
