name: Deploy to Dev (GKE)

on:
  push:
    branches:
      - feature/**
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'helm/**'
      - '.github/workflows/deploy-dev.yml'
  workflow_dispatch:

env:
  PROJECT_ID: missing-table
  REGION: us-central1
  GAR_LOCATION: us-central1
  CLUSTER_NAME: gke-dev-cluster
  NAMESPACE: missing-table-dev

jobs:
  build-and-deploy:
    name: Build and Deploy to Dev
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker to use gcloud as credential helper
      run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

    - name: Build and push backend image
      id: build-backend
      run: |
        IMAGE_TAG=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/missing-table/backend:${{ github.sha }}
        IMAGE_LATEST=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/missing-table/backend:latest

        docker build -f backend/Dockerfile -t $IMAGE_TAG -t $IMAGE_LATEST backend/
        docker push $IMAGE_TAG
        docker push $IMAGE_LATEST

        echo "image=$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Build and push frontend image
      id: build-frontend
      run: |
        IMAGE_TAG=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/missing-table/frontend:${{ github.sha }}
        IMAGE_LATEST=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/missing-table/frontend:latest

        docker build -f frontend/Dockerfile -t $IMAGE_TAG -t $IMAGE_LATEST frontend/
        docker push $IMAGE_TAG
        docker push $IMAGE_LATEST

        echo "image=$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials ${{ env.CLUSTER_NAME }} \
          --region ${{ env.REGION }} \
          --project ${{ env.PROJECT_ID }}

    - name: Install Helm
      uses: azure/setup-helm@v4
      with:
        version: 'latest'

    - name: Deploy to GKE with Helm
      run: |
        # Create values-dev.yaml from secrets (if it doesn't exist in repo)
        if [ ! -f helm/missing-table/values-dev.yaml ]; then
          echo "Creating values-dev.yaml from template..."
          cp helm/missing-table/values-dev.yaml.example helm/missing-table/values-dev.yaml

          # Replace placeholders with secrets
          sed -i "s|SUPABASE_URL_PLACEHOLDER|${{ secrets.SUPABASE_URL_DEV }}|g" helm/missing-table/values-dev.yaml
          sed -i "s|SUPABASE_ANON_KEY_PLACEHOLDER|${{ secrets.SUPABASE_ANON_KEY_DEV }}|g" helm/missing-table/values-dev.yaml
          sed -i "s|SUPABASE_SERVICE_KEY_PLACEHOLDER|${{ secrets.SUPABASE_SERVICE_KEY_DEV }}|g" helm/missing-table/values-dev.yaml
          sed -i "s|JWT_SECRET_PLACEHOLDER|${{ secrets.JWT_SECRET_DEV }}|g" helm/missing-table/values-dev.yaml
        fi

        # Deploy using Helm
        helm upgrade missing-table ./helm/missing-table \
          --install \
          --namespace ${{ env.NAMESPACE }} \
          --create-namespace \
          --values ./helm/missing-table/values-dev.yaml \
          --set backend.image.tag=${{ github.sha }} \
          --set frontend.image.tag=${{ github.sha }} \
          --wait \
          --timeout 5m

    - name: Verify deployment
      run: |
        kubectl rollout status deployment/missing-table-backend -n ${{ env.NAMESPACE }} --timeout=300s
        kubectl rollout status deployment/missing-table-frontend -n ${{ env.NAMESPACE }} --timeout=300s

    - name: Get service URLs
      run: |
        echo "### Deployment Complete! ðŸš€" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Backend Image**: ${{ steps.build-backend.outputs.image }}" >> $GITHUB_STEP_SUMMARY
        echo "**Frontend Image**: ${{ steps.build-frontend.outputs.image }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        BACKEND_IP=$(kubectl get svc missing-table-backend -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}' || echo "pending")
        FRONTEND_IP=$(kubectl get svc missing-table-frontend -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}' || echo "pending")

        echo "**Backend URL**: http://$BACKEND_IP:8000" >> $GITHUB_STEP_SUMMARY
        echo "**Frontend URL**: http://$FRONTEND_IP:8080" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Namespace**: ${{ env.NAMESPACE }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

    - name: Run health checks
      run: |
        # Wait for LoadBalancer IP
        sleep 30

        BACKEND_IP=$(kubectl get svc missing-table-backend -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')

        if [ -n "$BACKEND_IP" ]; then
          echo "Testing backend health endpoint..."
          curl -f "http://$BACKEND_IP:8000/health" || echo "Health check failed (may still be starting)"
        else
          echo "Backend LoadBalancer IP not yet assigned"
        fi
