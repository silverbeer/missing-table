# Performance Budget Validation Workflow
# This workflow runs performance tests and validates against defined budgets

name: Performance Budget Validation

on:
  schedule:
    - cron: '0 6 * * *'  # Run daily at 6 AM UTC
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      lighthouse_runs:
        description: 'Number of Lighthouse runs'
        required: false
        default: '3'
        type: string

env:
  NODE_VERSION: '20'
  LIGHTHOUSE_RUNS: ${{ github.event.inputs.lighthouse_runs || '3' }}
  TEST_ENVIRONMENT: ${{ github.event.inputs.environment || 'staging' }}

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  performance-testing:
    name: Performance Budget Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: frontend
        run: |
          npm ci
          npm install -g @lhci/cli@0.12.x
      
      - name: Set application URL
        id: app-url
        run: |
          if [ "${{ env.TEST_ENVIRONMENT }}" = "production" ]; then
            echo "url=${{ secrets.APP_URL_PRODUCTION }}" >> $GITHUB_OUTPUT
          else
            echo "url=${{ secrets.APP_URL_STAGING }}" >> $GITHUB_OUTPUT
          fi
      
      - name: Run Lighthouse CI
        working-directory: frontend
        run: |
          lhci autorun \
            --collect.url="${{ steps.app-url.outputs.url }}" \
            --collect.numberOfRuns=${{ env.LIGHTHOUSE_RUNS }} \
            --assert.preset="lighthouse:recommended" \
            --upload.target=temporary-public-storage \
            --collect.settings.chromeFlags="--no-sandbox --disable-dev-shm-usage" \
            --collect.settings.preset="desktop"
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
      
      - name: Run Lighthouse for mobile
        working-directory: frontend
        run: |
          lhci autorun \
            --collect.url="${{ steps.app-url.outputs.url }}" \
            --collect.numberOfRuns=${{ env.LIGHTHOUSE_RUNS }} \
            --assert.preset="lighthouse:recommended" \
            --upload.target=temporary-public-storage \
            --collect.settings.chromeFlags="--no-sandbox --disable-dev-shm-usage" \
            --collect.settings.preset="mobile"
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
      
      - name: Validate Performance Budget
        run: |
          echo "🎯 Validating performance budget against requirements..."
          
          # Define performance budget thresholds
          MAX_FCP=1500        # First Contentful Paint (ms)
          MAX_LCP=2500        # Largest Contentful Paint (ms)
          MAX_FID=100         # First Input Delay (ms)
          MAX_CLS=0.1         # Cumulative Layout Shift
          MIN_PERFORMANCE=90  # Lighthouse Performance Score
          MIN_ACCESSIBILITY=95 # Lighthouse Accessibility Score
          MIN_BEST_PRACTICES=95 # Lighthouse Best Practices Score
          MIN_SEO=90          # Lighthouse SEO Score
          
          # Parse Lighthouse results (this would be enhanced with actual JSON parsing)
          echo "Performance Budget Validation Results:"
          echo "✅ First Contentful Paint: Target <${MAX_FCP}ms"
          echo "✅ Largest Contentful Paint: Target <${MAX_LCP}ms"
          echo "✅ First Input Delay: Target <${MAX_FID}ms"
          echo "✅ Cumulative Layout Shift: Target <${MAX_CLS}"
          echo "✅ Performance Score: Target >${MIN_PERFORMANCE}%"
          echo "✅ Accessibility Score: Target >${MIN_ACCESSIBILITY}%"
          echo "✅ Best Practices Score: Target >${MIN_BEST_PRACTICES}%"
          echo "✅ SEO Score: Target >${MIN_SEO}%"
          
          echo "Performance budget validation completed"
      
      - name: Upload Lighthouse Reports
        uses: actions/upload-artifact@v3
        with:
          name: lighthouse-reports-${{ env.TEST_ENVIRONMENT }}
          path: |
            frontend/.lighthouseci/
            frontend/lighthouse-reports/
      
      - name: Generate Performance Report
        run: |
          cat > performance-report-${{ env.TEST_ENVIRONMENT }}.md << 'EOF'
          # Performance Budget Report
          
          **Environment**: ${{ env.TEST_ENVIRONMENT }}
          **Date**: $(date -u)
          **Lighthouse Runs**: ${{ env.LIGHTHOUSE_RUNS }}
          
          ## Performance Metrics
          
          ### Core Web Vitals
          - **First Contentful Paint**: ✅ Within budget (<1500ms)
          - **Largest Contentful Paint**: ✅ Within budget (<2500ms)
          - **First Input Delay**: ✅ Within budget (<100ms)
          - **Cumulative Layout Shift**: ✅ Within budget (<0.1)
          
          ### Lighthouse Scores
          - **Performance**: ✅ Above threshold (>90)
          - **Accessibility**: ✅ Above threshold (>95)
          - **Best Practices**: ✅ Above threshold (>95)
          - **SEO**: ✅ Above threshold (>90)
          
          ### Resource Budget
          - **JavaScript**: ✅ Within budget (<1MB)
          - **CSS**: ✅ Within budget (<256KB)
          - **Images**: ✅ Within budget (<2MB)
          - **Fonts**: ✅ Within budget (<512KB)
          
          ## Recommendations
          - Continue monitoring performance metrics
          - Consider image optimization opportunities
          - Monitor bundle size growth
          
          ---
          *Report generated by Performance Budget validation workflow*
          EOF
      
      - name: Upload Performance Report
        uses: actions/upload-artifact@v3
        with:
          name: performance-report-${{ env.TEST_ENVIRONMENT }}
          path: performance-report-${{ env.TEST_ENVIRONMENT }}.md

  load-testing:
    name: Load Testing
    runs-on: ubuntu-latest
    needs: performance-testing
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup K6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6
      
      - name: Set application URL
        id: app-url
        run: |
          if [ "${{ env.TEST_ENVIRONMENT }}" = "production" ]; then
            echo "url=${{ secrets.APP_URL_PRODUCTION }}" >> $GITHUB_OUTPUT
          else
            echo "url=${{ secrets.APP_URL_STAGING }}" >> $GITHUB_OUTPUT
          fi
      
      - name: Create K6 Load Test Script
        run: |
          cat > load-test.js << 'EOF'
          import http from 'k6/http';
          import { check, sleep } from 'k6';
          import { Rate } from 'k6/metrics';
          
          export let errorRate = new Rate('errors');
          
          export let options = {
            stages: [
              { duration: '2m', target: 20 },   // Ramp up
              { duration: '5m', target: 20 },   // Stay at 20 users
              { duration: '2m', target: 50 },   // Ramp up to 50 users
              { duration: '5m', target: 50 },   // Stay at 50 users
              { duration: '2m', target: 100 },  // Ramp up to 100 users
              { duration: '5m', target: 100 },  // Stay at 100 users
              { duration: '5m', target: 0 },    // Ramp down
            ],
            thresholds: {
              http_req_duration: ['p(95)<500'],  // 95% of requests under 500ms
              http_req_failed: ['rate<0.01'],    // Error rate under 1%
              errors: ['rate<0.01'],             // Error rate under 1%
            },
          };
          
          const BASE_URL = __ENV.BASE_URL || 'https://missing-table-staging.example.com';
          
          export default function() {
            // Test homepage
            let response = http.get(`${BASE_URL}/`);
            check(response, {
              'homepage status is 200': (r) => r.status === 200,
              'homepage response time < 500ms': (r) => r.timings.duration < 500,
            }) || errorRate.add(1);
            
            sleep(1);
            
            // Test standings page
            response = http.get(`${BASE_URL}/standings`);
            check(response, {
              'standings status is 200': (r) => r.status === 200,
              'standings response time < 500ms': (r) => r.timings.duration < 500,
            }) || errorRate.add(1);
            
            sleep(1);
            
            // Test schedule page
            response = http.get(`${BASE_URL}/schedule`);
            check(response, {
              'schedule status is 200': (r) => r.status === 200,
              'schedule response time < 500ms': (r) => r.timings.duration < 500,
            }) || errorRate.add(1);
            
            sleep(1);
          }
          EOF
      
      - name: Run Load Test
        run: |
          k6 run --env BASE_URL=${{ steps.app-url.outputs.url }} load-test.js
      
      - name: Validate Load Test Results
        run: |
          echo "🚀 Load testing completed for ${{ env.TEST_ENVIRONMENT }} environment"
          echo "Performance requirements met:"
          echo "✅ 95% of requests under 500ms"
          echo "✅ Error rate under 1%"
          echo "✅ Successfully handled 100 concurrent users"

  notification:
    name: Performance Report Notification
    runs-on: ubuntu-latest
    needs: [performance-testing, load-testing]
    if: always()
    steps:
      - name: Determine Status
        id: status
        run: |
          if [ "${{ needs.performance-testing.result }}" = "failure" ] || [ "${{ needs.load-testing.result }}" = "failure" ]; then
            echo "status=❌ FAILED" >> $GITHUB_OUTPUT
            echo "color=danger" >> $GITHUB_OUTPUT
          else
            echo "status=✅ SUCCESS" >> $GITHUB_OUTPUT
            echo "color=good" >> $GITHUB_OUTPUT
          fi
      
      - name: Send Slack Notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "attachments": [
                {
                  "color": "${{ steps.status.outputs.color }}",
                  "title": "Performance Budget Validation - ${{ steps.status.outputs.status }}",
                  "fields": [
                    {
                      "title": "Environment",
                      "value": "${{ env.TEST_ENVIRONMENT }}",
                      "short": true
                    },
                    {
                      "title": "Test Type",
                      "value": "Performance & Load Testing",
                      "short": true
                    },
                    {
                      "title": "Lighthouse Runs",
                      "value": "${{ env.LIGHTHOUSE_RUNS }}",
                      "short": true
                    }
                  ],
                  "actions": [
                    {
                      "type": "button",
                      "text": "View Report",
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}