name: GCP Deployment with Security Scanning

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'gcp/**'
      - '.github/workflows/gcp-deploy.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'gcp/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  GAR_LOCATION: us-central1
  SERVICE: missing-table
  
jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'

    - name: Upload Trivy results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        category: 'trivy-gcp'

    - name: Run Hadolint for Dockerfiles
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: backend/Dockerfile.secure
        format: sarif
        output-file: hadolint-results.sarif
        no-fail: true

    - name: Upload Hadolint results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: hadolint-results.sarif
        category: 'hadolint-gcp'

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: security-scan
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      id-token: write
      pull-requests: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.0

    - name: Terraform Format Check
      working-directory: gcp/terraform
      run: terraform fmt -check -recursive

    - name: Terraform Init
      working-directory: gcp/terraform
      run: terraform init

    - name: Terraform Validate
      working-directory: gcp/terraform
      run: terraform validate

    - name: Terraform Plan
      working-directory: gcp/terraform
      run: |
        terraform plan -var-file="terraform.tfvars" -out=tfplan
        terraform show -json tfplan > tfplan.json
      env:
        TF_VAR_project_id: ${{ env.PROJECT_ID }}
        TF_VAR_admin_email: ${{ secrets.ADMIN_EMAIL }}
        TF_VAR_security_contact_email: ${{ secrets.SECURITY_CONTACT_EMAIL }}
        TF_VAR_devops_contact_email: ${{ secrets.DEVOPS_CONTACT_EMAIL }}
        TF_VAR_alert_email: ${{ secrets.ALERT_EMAIL }}
        TF_VAR_billing_account_id: ${{ secrets.BILLING_ACCOUNT_ID }}

    - name: Run Checkov on Terraform Plan
      uses: bridgecrewio/checkov-action@master
      with:
        directory: gcp/terraform
        framework: terraform_plan
        file: tfplan.json
        output_format: sarif
        output_file_path: checkov-results.sarif
        soft_fail: true

    - name: Upload Checkov results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: checkov-results.sarif
        category: 'checkov-terraform-plan'

  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: security-scan
    permissions:
      contents: read
      id-token: write
      
    outputs:
      backend-image: ${{ steps.build-backend.outputs.image }}
      frontend-image: ${{ steps.build-frontend.outputs.image }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker to use gcloud as credential helper
      run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

    - name: Create Artifact Registry repository
      run: |
        gcloud artifacts repositories create ${{ env.SERVICE }} \
          --repository-format=docker \
          --location=${{ env.GAR_LOCATION }} \
          --description="Repository for Missing Table application" \
          --quiet || true

    - name: Build and push backend image
      id: build-backend
      run: |
        IMAGE_TAG=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/backend:${{ github.sha }}
        
        docker build -f backend/Dockerfile.secure -t $IMAGE_TAG backend/
        docker push $IMAGE_TAG
        
        echo "image=$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Build and push frontend image
      id: build-frontend
      run: |
        IMAGE_TAG=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/frontend:${{ github.sha }}
        
        docker build -f frontend/Dockerfile.secure -t $IMAGE_TAG frontend/
        docker push $IMAGE_TAG
        
        echo "image=$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Scan backend image with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.build-backend.outputs.image }}
        format: 'sarif'
        output: 'trivy-backend-image.sarif'

    - name: Scan frontend image with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.build-frontend.outputs.image }}
        format: 'sarif'
        output: 'trivy-frontend-image.sarif'

    - name: Upload backend image scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-backend-image.sarif'
        category: 'trivy-backend-image'

    - name: Upload frontend image scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-frontend-image.sarif'
        category: 'trivy-frontend-image'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    permissions:
      contents: read
      id-token: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials missing-table-staging-cluster \
          --region ${{ env.REGION }} \
          --project ${{ env.PROJECT_ID }}

    - name: Update Kubernetes manifests
      run: |
        # Update image tags in Kubernetes manifests
        sed -i "s|IMAGE_TAG_BACKEND|${{ needs.build-and-push.outputs.backend-image }}|g" gcp/k8s/staging/*.yaml
        sed -i "s|IMAGE_TAG_FRONTEND|${{ needs.build-and-push.outputs.frontend-image }}|g" gcp/k8s/staging/*.yaml

    - name: Deploy to GKE
      run: |
        kubectl apply -f gcp/k8s/staging/

    - name: Verify deployment
      run: |
        kubectl rollout status deployment/missing-table-backend -n missing-table-staging --timeout=300s
        kubectl rollout status deployment/missing-table-frontend -n missing-table-staging --timeout=300s

    - name: Run post-deployment tests
      run: |
        # Wait for services to be ready
        sleep 30
        
        # Get service URL
        BACKEND_URL=$(kubectl get svc missing-table-backend -n missing-table-staging -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        
        # Health check
        curl -f "http://$BACKEND_URL:8000/health" || exit 1
        
        echo "Staging deployment successful!"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, terraform-plan]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    permissions:
      contents: read
      id-token: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.0

    - name: Apply Terraform changes
      working-directory: gcp/terraform
      run: |
        terraform init
        terraform apply -var-file="terraform.tfvars" -auto-approve
      env:
        TF_VAR_project_id: ${{ env.PROJECT_ID }}
        TF_VAR_admin_email: ${{ secrets.ADMIN_EMAIL }}
        TF_VAR_security_contact_email: ${{ secrets.SECURITY_CONTACT_EMAIL }}
        TF_VAR_devops_contact_email: ${{ secrets.DEVOPS_CONTACT_EMAIL }}
        TF_VAR_alert_email: ${{ secrets.ALERT_EMAIL }}
        TF_VAR_billing_account_id: ${{ secrets.BILLING_ACCOUNT_ID }}

    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials missing-table-production-cluster \
          --region ${{ env.REGION }} \
          --project ${{ env.PROJECT_ID }}

    - name: Update Kubernetes manifests
      run: |
        # Update image tags in Kubernetes manifests
        sed -i "s|IMAGE_TAG_BACKEND|${{ needs.build-and-push.outputs.backend-image }}|g" gcp/k8s/production/*.yaml
        sed -i "s|IMAGE_TAG_FRONTEND|${{ needs.build-and-push.outputs.frontend-image }}|g" gcp/k8s/production/*.yaml

    - name: Deploy to GKE
      run: |
        kubectl apply -f gcp/k8s/production/

    - name: Verify deployment
      run: |
        kubectl rollout status deployment/missing-table-backend -n missing-table --timeout=600s
        kubectl rollout status deployment/missing-table-frontend -n missing-table --timeout=600s

    - name: Run post-deployment tests
      run: |
        # Wait for services to be ready
        sleep 60
        
        # Get service URL
        BACKEND_URL=$(kubectl get svc missing-table-backend -n missing-table -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        
        # Health check
        curl -f "http://$BACKEND_URL:8000/health" || exit 1
        
        # Basic API test
        curl -f "http://$BACKEND_URL:8000/api/health" || exit 1
        
        echo "Production deployment successful!"

    - name: Create deployment notification
      run: |
        curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
          -H 'Content-type: application/json' \
          --data '{
            "text": "🚀 Production Deployment Complete",
            "attachments": [
              {
                "color": "good",
                "fields": [
                  {
                    "title": "Environment",
                    "value": "Production",
                    "short": true
                  },
                  {
                    "title": "Commit",
                    "value": "${{ github.sha }}",
                    "short": true
                  },
                  {
                    "title": "Backend Image",
                    "value": "${{ needs.build-and-push.outputs.backend-image }}",
                    "short": false
                  },
                  {
                    "title": "Frontend Image", 
                    "value": "${{ needs.build-and-push.outputs.frontend-image }}",
                    "short": false
                  }
                ]
              }
            ]
          }' || true

  security-attestation:
    name: Create Security Attestation
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-production]
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      id-token: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Create Binary Authorization attestation
      run: |
        # Create attestation for backend image
        gcloud beta container binauthz attestations sign-and-create \
          --artifact-url="${{ needs.build-and-push.outputs.backend-image }}" \
          --attestor="projects/${{ env.PROJECT_ID }}/attestors/missing-table-production-vulnerability-attestor" \
          --signature-algorithm=rsa-pss-2048-sha256 \
          --public-key-id="vulnerability-scanner-key"
        
        # Create attestation for frontend image  
        gcloud beta container binauthz attestations sign-and-create \
          --artifact-url="${{ needs.build-and-push.outputs.frontend-image }}" \
          --attestor="projects/${{ env.PROJECT_ID }}/attestors/missing-table-production-vulnerability-attestor" \
          --signature-algorithm=rsa-pss-2048-sha256 \
          --public-key-id="vulnerability-scanner-key"

  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()
    permissions:
      contents: read
      id-token: write
      
    steps:
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Clean up old images
      run: |
        # Keep only the last 10 images of each service
        gcloud artifacts docker images list ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/backend \
          --sort-by="~UPDATE_TIME" --limit=10 --format="value(DIGEST)" > keep_backend.txt
        
        gcloud artifacts docker images list ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/frontend \
          --sort-by="~UPDATE_TIME" --limit=10 --format="value(DIGEST)" > keep_frontend.txt
        
        # Delete old backend images
        gcloud artifacts docker images list ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/backend \
          --format="value(DIGEST)" | grep -v -f keep_backend.txt | head -20 | while read digest; do
          echo "Deleting old backend image: $digest"
          gcloud artifacts docker images delete "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/backend@$digest" --quiet || true
        done
        
        # Delete old frontend images
        gcloud artifacts docker images list ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/frontend \
          --format="value(DIGEST)" | grep -v -f keep_frontend.txt | head -20 | while read digest; do
          echo "Deleting old frontend image: $digest"
          gcloud artifacts docker images delete "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/frontend@$digest" --quiet || true
        done