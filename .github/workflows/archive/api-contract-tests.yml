name: API Contract Tests

on:
  push:
    branches: [main, develop, 'feature/**']
    paths:
      - 'backend/**'
      - '.github/workflows/api-contract-tests.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'backend/**'

jobs:
  contract-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Install uv
        run: pip install uv

      - name: Install dependencies
        working-directory: backend
        run: uv sync

      - name: Export OpenAPI schema
        working-directory: backend
        run: uv run python scripts/export_openapi.py

      - name: Validate OpenAPI schema
        working-directory: backend
        run: |
          uv run python -c "from openapi_spec_validator import validate; import json; validate(json.load(open('openapi.json')))"

      - name: Run contract tests
        working-directory: backend
        run: |
          uv run pytest tests/contract/ -m contract -v --tb=short

      - name: Check API coverage
        working-directory: backend
        run: |
          uv run python scripts/check_api_coverage.py --threshold 70 --fail-below

      - name: Generate coverage report (JSON)
        if: always()
        working-directory: backend
        run: |
          uv run python scripts/check_api_coverage.py --format json > api-coverage.json

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: api-coverage-report
          path: backend/api-coverage.json
          retention-days: 30

  schemathesis-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install uv
        run: pip install uv

      - name: Install dependencies
        working-directory: backend
        run: uv sync

      - name: Export OpenAPI schema
        working-directory: backend
        run: uv run python scripts/export_openapi.py

      - name: Run Schemathesis property-based tests
        working-directory: backend
        run: |
          uv run pytest tests/contract/test_schemathesis.py -v --tb=short

  coverage-comment:
    runs-on: ubuntu-latest
    needs: [contract-tests]
    if: github.event_name == 'pull_request'

    steps:
      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: api-coverage-report

      - name: Comment PR with coverage
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const coverage = JSON.parse(fs.readFileSync('api-coverage.json', 'utf8'));
            const stats = coverage.stats;

            const comment = `## 📊 API Contract Coverage Report

            **Overall Coverage:**
            - Endpoints: ${stats.tested_endpoints}/${stats.total_endpoints} (${stats.endpoint_coverage_pct.toFixed(1)}%)
            - Methods: ${stats.tested_methods}/${stats.total_methods} (${stats.method_coverage_pct.toFixed(1)}%)

            **Coverage by Category:**
            ${Object.entries(stats.category_stats).map(([cat, s]) => {
              const pct = (s.tested / s.total * 100).toFixed(0);
              const emoji = pct == 100 ? '✅' : pct >= 50 ? '⚠️' : '❌';
              return `${emoji} **${cat}**: ${s.tested}/${s.total} (${pct}%)`;
            }).join('\n')}

            <details>
            <summary>📋 View detailed coverage</summary>

            | Path | Methods | Tested | Untested | Status |
            |------|---------|--------|----------|--------|
            ${Object.entries(coverage.coverage).map(([path, data]) => {
              const status = data.untested_methods.length === 0 ? '✅' : data.tested_methods.length > 0 ? '⚠️' : '❌';
              return `| ${path} | ${data.methods.join(', ')} | ${data.tested_methods.join(', ') || '-'} | ${data.untested_methods.join(', ') || '-'} | ${status} |`;
            }).slice(0, 20).join('\n')}

            </details>
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
