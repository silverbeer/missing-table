name: Infrastructure Security Scanning

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'terraform/**'
      - 'k8s/**'
      - '.github/workflows/infrastructure-security.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'terraform/**'
      - 'k8s/**'
  schedule:
    # Run infrastructure security scan daily at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:

jobs:
  terraform-security:
    name: Terraform Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.0

    - name: Terraform Format Check
      run: |
        cd terraform
        terraform fmt -check -recursive

    - name: Terraform Init
      run: |
        cd terraform
        terraform init -backend=false

    - name: Terraform Validate
      run: |
        cd terraform
        terraform validate

    - name: Run Checkov
      id: checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: terraform/
        framework: terraform
        output_format: sarif
        output_file_path: reports/checkov-results.sarif
        quiet: true
        soft_fail: true

    - name: Upload Checkov results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: reports/checkov-results.sarif
        category: checkov-terraform

    - name: Run Terrascan
      id: terrascan
      uses: tenable/terrascan-action@main
      with:
        iac_type: terraform
        iac_version: v15
        policy_type: aws
        only_warn: true
        sarif_upload: true
        non_recursive: false
        iac_dir: terraform/

    - name: Upload Terrascan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: terrascan.sarif
        category: terrascan-terraform

    - name: Run TFSec
      uses: aquasecurity/tfsec-sarif-action@v0.1.4
      with:
        sarif_file: tfsec-results.sarif
        working_directory: terraform/

    - name: Upload TFSec results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: tfsec-results.sarif
        category: tfsec-terraform

    - name: Run Trivy IaC scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: 'terraform/'
        format: 'sarif'
        output: 'trivy-iac-results.sarif'

    - name: Upload Trivy IaC results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: trivy-iac-results.sarif
        category: trivy-iac

    - name: Store terraform scan artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: terraform-security-results
        path: |
          reports/checkov-results.sarif
          terrascan.sarif
          tfsec-results.sarif
          trivy-iac-results.sarif
        retention-days: 30

  kubernetes-security:
    name: Kubernetes Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy K8s config scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: 'k8s/'
        format: 'sarif'
        output: 'trivy-k8s-results.sarif'

    - name: Upload Trivy K8s results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: trivy-k8s-results.sarif
        category: trivy-k8s

    - name: Run Polaris
      run: |
        # Install Polaris
        curl -L https://github.com/FairwindsOps/polaris/releases/latest/download/polaris_linux_amd64.tar.gz | tar xz
        sudo mv polaris /usr/local/bin/
        
        # Run Polaris audit
        polaris audit --config k8s/polaris/polaris-config.yaml --audit-path k8s/ --format sarif > polaris-results.sarif

    - name: Upload Polaris results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: polaris-results.sarif
        category: polaris-k8s

    - name: Run KubeLinter
      run: |
        # Install KubeLinter
        curl -L https://github.com/stackrox/kube-linter/releases/latest/download/kube-linter-linux.tar.gz | tar xz
        sudo mv kube-linter /usr/local/bin/
        
        # Run KubeLinter
        kube-linter lint k8s/ --format sarif > kubelinter-results.sarif

    - name: Upload KubeLinter results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: kubelinter-results.sarif
        category: kubelinter-k8s

    - name: Run Datree K8s policy check
      uses: datreeio/action-datree@main
      with:
        path: 'k8s/'
        cliArguments: '--only-k8s-files --output sarif --output-file datree-results.sarif'
      env:
        DATREE_TOKEN: ${{ secrets.DATREE_TOKEN }}
      continue-on-error: true

    - name: Upload Datree results
      uses: github/codeql-action/upload-sarif@v3
      if: always() && env.DATREE_TOKEN
      with:
        sarif_file: datree-results.sarif
        category: datree-k8s
      env:
        DATREE_TOKEN: ${{ secrets.DATREE_TOKEN }}

    - name: Store kubernetes scan artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: kubernetes-security-results
        path: |
          trivy-k8s-results.sarif
          polaris-results.sarif
          kubelinter-results.sarif
          datree-results.sarif
        retention-days: 30

  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy Docker file scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-docker-results.sarif'
        scanners: 'config'

    - name: Upload Trivy Docker results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: trivy-docker-results.sarif
        category: trivy-docker

    - name: Run Hadolint
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: backend/Dockerfile
        format: sarif
        output-file: hadolint-backend-results.sarif
        no-fail: true

    - name: Run Hadolint for secure Dockerfile
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: backend/Dockerfile.secure
        format: sarif
        output-file: hadolint-backend-secure-results.sarif
        no-fail: true

    - name: Run Hadolint for frontend
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: frontend/Dockerfile
        format: sarif
        output-file: hadolint-frontend-results.sarif
        no-fail: true

    - name: Run Hadolint for secure frontend
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: frontend/Dockerfile.secure
        format: sarif
        output-file: hadolint-frontend-secure-results.sarif
        no-fail: true

    - name: Upload Hadolint results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: |
          hadolint-backend-results.sarif
          hadolint-backend-secure-results.sarif
          hadolint-frontend-results.sarif
          hadolint-frontend-secure-results.sarif
        category: hadolint-docker

    - name: Store docker scan artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: docker-security-results
        path: |
          trivy-docker-results.sarif
          hadolint-*-results.sarif
        retention-days: 30

  infrastructure-report:
    name: Generate Infrastructure Security Report
    runs-on: ubuntu-latest
    needs: [terraform-security, kubernetes-security, docker-security]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Generate consolidated report
      run: |
        mkdir -p reports
        
        cat > reports/infrastructure-security-summary.md << 'EOF'
        # Infrastructure Security Scan Summary
        
        Generated on: $(date)
        Commit: ${{ github.sha }}
        Branch: ${{ github.ref_name }}
        
        ## Scans Performed
        
        ### Terraform Security
        - ✅ Checkov (Policy as Code)
        - ✅ Terrascan (IaC Security)
        - ✅ TFSec (Static Analysis)
        - ✅ Trivy (Vulnerability Scanning)
        
        ### Kubernetes Security
        - ✅ Trivy (Config Scanning)
        - ✅ Polaris (Best Practices)
        - ✅ KubeLinter (Security Policies)
        - ✅ Datree (Policy Validation)
        
        ### Docker Security
        - ✅ Trivy (Container Scanning)
        - ✅ Hadolint (Dockerfile Linting)
        
        ## Results
        
        All security scan results are available as SARIF files and have been uploaded to GitHub Security tab.
        
        ## Recommendations
        
        1. Review all findings in the GitHub Security tab
        2. Prioritize Critical and High severity issues
        3. Implement recommended security controls
        4. Update security policies as needed
        5. Schedule regular security reviews
        
        EOF

    - name: Store consolidated report
      uses: actions/upload-artifact@v4
      with:
        name: infrastructure-security-report
        path: reports/
        retention-days: 90